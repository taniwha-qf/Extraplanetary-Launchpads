#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass scrartcl
\begin_preamble
\usepackage{pgf}
\usepackage{tikz}
\usetikzlibrary{shapes,arrows}
\usepackage{dot2texi}
\usepackage{marginfix}
\usepackage{polyglossia}
\setdefaultlanguage{english}
\usepackage[nottoc]{tocbibind}
\usepackage[style=numeric,backend=biber]{biblatex}
\addbibresource{kspforums.bib}
\setlength{\intextsep}{0cm plus1cm minus1cm}
\date{}
\end_preamble
\use_default_options true
\begin_modules
logicalmkup
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts true
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command biber
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Extraplanetary Launchpads
\end_layout

\begin_layout Subtitle
User's and Modder's Guide
\end_layout

\begin_layout Author
Bill Currie (taniwha)
\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename base3.svg
	width 100text%

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Part*
Introduction
\end_layout

\begin_layout Standard
Building bases and space stations in Kerbal Space Program can be fun and
 rewarding on its own: they look good and allow for the production or storage
 of fuel and science, but they amount to little more than outposts.
 One main problem with such outposts is that when things go wrong and repairs
 are needed, they are highly dependent on resupply runs from the KSC
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Kerbal Space Center? Kerbin Space Center? Kerman Space Center? Kraken Snack
 Constructor?
\end_layout

\end_inset

.
 A bigger problem is they serve only as way stations for grand missions:
 it is very difficult to use them as the origin of such missions as all
 the vessels comprising the grand mission must be launched from the KSC.
\end_layout

\begin_layout Standard
Extraplanetary Launchpads (or EL for short
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Just like 
\begin_inset Quotes eld
\end_inset

extraterrestrial
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

extraplanetary
\begin_inset Quotes erd
\end_inset

 is (or would be) one word, and 
\begin_inset Quotes eld
\end_inset

launchpad
\begin_inset Quotes erd
\end_inset

 is also one word, thus in this case TLA is Two Letter Acronym.
\end_layout

\end_inset

) gives additional meaning to planetary bases and orbiting space stations
 by allowing for the construction of all manner of vessels away from the
 KSC.
 The construction can be carried out both on the surface of any body and
 in orbit.
 However, EL does not do anything for life support supplies (other mods
 have that covered), or the expansion of the kerbal population at the base
 or station.
\end_layout

\begin_layout Standard
EL defines the resources
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Other mods can define other resource that replace those defined by EL.
\end_layout

\end_inset

 used in the construction of vessels, and provides the parts required to
 obtain and process those resources into the final product: a vessel that
 can be an independent ship (or other vehicle), base, station, a module
 for a larger vessel, or even individual parts
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Though currently a little awkwardly.
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList figure

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList table

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Part
Using Extraplanetary Launchpads
\end_layout

\begin_layout Section
Getting Started
\end_layout

\begin_layout Subsection
Installation
\end_layout

\begin_layout Subsubsection
Minimal Installation
\end_layout

\begin_layout Standard
Download the zip file for the latest version via the EL forum thread
\begin_inset CommandInset citation
LatexCommand cite
key "EL"
literal "true"

\end_inset

 and extract its contents to KSP's 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
GameData
\end_layout

\end_inset

 directory
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Ok, folder.
 Now get off my lawn ;)
\end_layout

\end_inset

.
 Ensure that the latest version of Module Manager
\begin_inset CommandInset citation
LatexCommand cite
key "MM"
literal "true"

\end_inset

 is installed correctly.
\end_layout

\begin_layout Standard
Note that the minimal installation will not support survey builds.
\end_layout

\begin_layout Subsubsection
Survey Build Support
\end_layout

\begin_layout Standard
In order to support survey builds, Kerbal Inventory System
\begin_inset CommandInset citation
LatexCommand cite
key "KIS"
literal "true"

\end_inset

 is required.
\end_layout

\begin_layout Subsubsection
Recommended Mods
\end_layout

\begin_layout Standard
There are several mods that improve EL:
\end_layout

\begin_layout Description
Diamond
\begin_inset space ~
\end_inset

Grid
\begin_inset space ~
\end_inset

Trusses
\begin_inset space ~
\end_inset

and
\begin_inset space ~
\end_inset

Containers
\begin_inset CommandInset citation
LatexCommand cite
key "DG"
literal "false"

\end_inset

 Truss and tank segments based off truncated triangles.
 
\end_layout

\begin_layout Description
Kerbal
\begin_inset space ~
\end_inset

Alarm
\begin_inset space ~
\end_inset

Clock
\begin_inset CommandInset citation
LatexCommand cite
key "KAC"
literal "true"

\end_inset

 Keep track of when a build will be finished.
 Really, the most important mod for anybody wishing to run multiple missions
 in parallel, and useful even for those who run only one mission at a time.
\end_layout

\begin_layout Description
KerbalStats
\begin_inset CommandInset citation
LatexCommand cite
key "KS"
literal "true"

\end_inset

 Provides a means to extend kerbal attributes, but in the context of EL
 it provides time and activity based experience for kerbals.
\end_layout

\begin_layout Description
Kethane
\begin_inset CommandInset citation
LatexCommand cite
key "Keth"
literal "true"

\end_inset

 The original ISRU solution for KSP.
 Provides hot-spot
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Areas where resource extraction is done at 100% of extractor capacity.
 Other areas (those covered by the stock resource system) get 1% to 15%
 extraction rate.
\end_layout

\end_inset

 mining of 
\noun on
MetalOre
\noun default
.
\end_layout

\begin_layout Description
Modular
\begin_inset space ~
\end_inset

Fuel
\begin_inset space ~
\end_inset

Tanks
\begin_inset CommandInset citation
LatexCommand cite
key "MFT"
literal "true"

\end_inset

 Edit tank resources in the editor.
\end_layout

\begin_layout Description
Talisar
\begin_inset space ~
\end_inset

Parts
\begin_inset CommandInset citation
LatexCommand cite
key "TP"
literal "true"

\end_inset

 High capacity spherical tanks (up to over 
\begin_inset Formula $200m^{3}$
\end_inset

) and various structural parts.
\end_layout

\begin_layout Description
Kerbal
\begin_inset space ~
\end_inset

Attachment
\begin_inset space ~
\end_inset

System
\begin_inset CommandInset citation
LatexCommand cite
key "KAS"
literal "true"

\end_inset

 Pipes and winches.
\end_layout

\begin_layout Description
TAC
\begin_inset space ~
\end_inset

Fuel
\begin_inset space \thinspace{}
\end_inset

Balancer
\begin_inset CommandInset citation
LatexCommand cite
key "TACFB"
literal "true"

\end_inset

 Easier transferal of resources.
\end_layout

\begin_layout Subsubsection
Mods that support or use EL
\end_layout

\begin_layout Description
Kerbal
\begin_inset space ~
\end_inset

Planetary
\begin_inset space ~
\end_inset

Base
\begin_inset space ~
\end_inset

Systems
\begin_inset CommandInset citation
LatexCommand cite
key "kpbs"
literal "true"

\end_inset

 Several new parts that are designed to be used in a planetary base for
 the kerbals.
\end_layout

\begin_layout Description
Pathfinder
\begin_inset CommandInset citation
LatexCommand cite
key "Path"
literal "true"

\end_inset

 Space Camping & Geoscience.
\end_layout

\begin_layout Description
SimpleConstuction
\begin_inset CommandInset citation
LatexCommand cite
key "SC"
literal "true"

\end_inset

 Uses EL but stock parts.
\end_layout

\begin_layout Subsection
Setup
\end_layout

\begin_layout Standard
The first time the space center scene is entered, an options window will
 be presented allowing for the selection of various settings:
\end_layout

\begin_layout Itemize
Use of Blizzy's toolbar when available.
\end_layout

\begin_layout Itemize
Creation of KAC alarms and the default action for those alarms.
\end_layout

\begin_layout Itemize
Visibility of the build resources window in the editors.
\end_layout

\begin_layout Itemize
Whether 
\begin_inset Quotes eld
\end_inset

craft hulls
\begin_inset Quotes erd
\end_inset

 are presented during build.
\end_layout

\begin_layout Itemize
Debug output for craft hulls.
 Generally not needed unless things go wrong in generating a hull, then
 the data will be requested.
\end_layout

\begin_layout Section
Construction Basics
\end_layout

\begin_layout Standard
\begin_inset Wrap figure
lines 0
placement O
overhang 0in
width "50col%"
status open

\begin_layout Plain Layout
\begin_inset Preview

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{dot2tex}[dot,tikz,options=-traw --autosize] digraph ConstructionBasics
 {
\end_layout

\begin_layout Plain Layout

	rankdir=TB;
\end_layout

\begin_layout Plain Layout

	prospecting->mining;
\end_layout

\begin_layout Plain Layout

	mining->smelting     [label="MetalOre"];
\end_layout

\begin_layout Plain Layout

	smelting->working    [label="Metal"];
\end_layout

\begin_layout Plain Layout

	working->building    [label="RocketParts"];
\end_layout

\begin_layout Plain Layout

	building->recycling  [label="Vessel"];
\end_layout

\begin_layout Plain Layout

	recycling->remelting [label="ScrapMetal"];
\end_layout

\begin_layout Plain Layout

	shipping->building   [label="RocketParts"];
\end_layout

\begin_layout Plain Layout

	shipping->working    [label="Metal"];
\end_layout

\begin_layout Plain Layout

	shipping->smelting   [label="MetalOre"];
\end_layout

\begin_layout Plain Layout

	shipping->recycling  [label="Vessel"];
\end_layout

\begin_layout Plain Layout

	working->remelting   [label="ScrapMetal"];
\end_layout

\begin_layout Plain Layout

	remelting->working   [label="Metal"];
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	recycling->building  [style=invis];
\end_layout

\begin_layout Plain Layout

	{rank=same shipping smelting}
\end_layout

\begin_layout Plain Layout

	{rank=same recycling remelting}
\end_layout

\begin_layout Plain Layout

} 
\backslash
end{dot2tex}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Resource flow chart
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Resources
\end_layout

\begin_layout Standard
Currently, EL uses four resources for its production chain (though the recipe
 system (see section 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Recipes"
plural "false"
caps "false"
noprefix "false"

\end_inset

) allows for much more complicated systems).
\end_layout

\begin_layout Description

\noun on
MetalOre
\noun default
 Assumed to be hematite
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
A common form of iron ore.
\end_layout

\end_inset

 (but not explicitly stated as such) and thus has a density of 
\begin_inset Formula $5.2t/m^{3}$
\end_inset

.
\end_layout

\begin_layout Description

\noun on
Metal
\noun default
 Assumed to be iron (but not explicitly stated as such) and thus has a density
 of 
\begin_inset Formula $7.8t/m^{3}$
\end_inset

.
\end_layout

\begin_layout Description

\noun on
RocketParts
\noun default
 Assumed to be sub-parts ready for assembly into actual parts, and thus
 has a very low density of 
\begin_inset Formula $0.5t/m^{3}$
\end_inset

.
\end_layout

\begin_layout Description

\noun on
ScrapMetal
\noun default
 The true product of any machine shop: all machine shops produce scrap metal
 in various forms and efficiencies.
 The lumps of metal handed over to the customer are really the left-overs
 from producing scrap metal.
 Scrap metal generally does not pack well, though better than parts, so
 a density of 
\begin_inset Formula $0.8t/m^{3}$
\end_inset

 was chosen as an average.
\end_layout

\begin_layout Subsubsection
Prospecting and Mining: dirt? to 
\noun on
MetalOre
\end_layout

\begin_layout Standard
In order to obtain 
\noun on
MetalOre
\noun default
 when away from the KSC, one of the augers is used to mine 
\noun on
MetalOre
\noun default
 from the surface of the planet or moon.
 EL uses the stock resource distribution system configured to distribute
 
\noun on
MetalOre
\noun default
, so prospecting is done as for stock's 
\noun on
Ore
\noun default
 resource, but with a focus on 
\noun on
MetalOre
\noun default
 instead.
\end_layout

\begin_layout Paragraph
Kethane and Karbonite
\end_layout

\begin_layout Standard
\begin_inset Marginal
status collapsed

\begin_layout Plain Layout
It may be worthwhile thinking of the stock system providing a means to extract
 MetalOre from a larger mix of 
\begin_inset Quotes eld
\end_inset

dirt
\begin_inset Quotes erd
\end_inset

, while the Kethane system provides access to rich veins of MetalOre.
\end_layout

\end_inset

Prior to KSP 1.0, EL relied solely on Kethane
\begin_inset CommandInset citation
LatexCommand cite
key "Keth"
literal "true"

\end_inset

 for its prospecting and mining, and there was an adaptation to make EL
 use Karbonite
\begin_inset CommandInset citation
LatexCommand cite
key "karb"
literal "true"

\end_inset

 instead.
\end_layout

\begin_layout Standard
As of KSP 1.0 (EL 5.1.90) Kethane is completely optional, but if present, will
 be used on top of the stock resource system.
 Scanning is quite separate, but mining is done using the exact same augers.
 Mining outside a 
\noun on
MetalOre
\noun default
 deposit created by Kethane will extract 
\noun on
MetalOre
\noun default
 at the rate dictated by the concentration given by the stock system (
\begin_inset Formula $1$
\end_inset

% to 
\begin_inset Formula $15$
\end_inset

%), but deposits created by Kethane effectively provide hot-spots of 
\begin_inset Formula $100$
\end_inset

% concentration.
\end_layout

\begin_layout Standard
The Karbonite adaptation seems to have been mothballed, but it was mostly
 a parts mod with configs for EL, so it may still be usable.
\end_layout

\begin_layout Subsubsection
Smelting: 
\noun on
MetalOre
\noun default
 to 
\noun on
Metal
\end_layout

\begin_layout Standard

\noun on
MetalOre
\noun default
 is converted to 
\noun on
Metal
\noun default
 via smelting.
 Smelting is the process of reducing
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Chemistry term, the opposite of oxidizing (or reduction vs oxidization).
\end_layout

\end_inset

 metal oxides.
 EL assumes 
\noun on
MetalOre
\noun default
 is Fe
\begin_inset script subscript

\begin_layout Plain Layout
2
\end_layout

\end_inset

O
\begin_inset script subscript

\begin_layout Plain Layout
3
\end_layout

\end_inset

 (the most common iron ore on Earth).
 Reducing Fe
\begin_inset script subscript

\begin_layout Plain Layout
2
\end_layout

\end_inset

O
\begin_inset script subscript

\begin_layout Plain Layout
3
\end_layout

\end_inset

 is a three-step process (from Wikipedia):
\end_layout

\begin_layout Description
Stage
\begin_inset space ~
\end_inset

One 3Fe
\begin_inset script subscript

\begin_layout Plain Layout
2
\end_layout

\end_inset

O
\begin_inset script subscript

\begin_layout Plain Layout
3
\end_layout

\end_inset

 + CO → 2Fe
\begin_inset script subscript

\begin_layout Plain Layout
3
\end_layout

\end_inset

O
\begin_inset script subscript

\begin_layout Plain Layout
4
\end_layout

\end_inset

 + CO
\begin_inset script subscript

\begin_layout Plain Layout
2
\end_layout

\end_inset


\end_layout

\begin_layout Description
Stage
\begin_inset space ~
\end_inset

Two Fe
\begin_inset script subscript

\begin_layout Plain Layout
3
\end_layout

\end_inset

O
\begin_inset script subscript

\begin_layout Plain Layout
4
\end_layout

\end_inset

+ CO → 3FeO + CO
\begin_inset script subscript

\begin_layout Plain Layout
2
\end_layout

\end_inset


\end_layout

\begin_layout Description
Stage
\begin_inset space ~
\end_inset

Three FeO + CO → Fe + CO
\begin_inset script subscript

\begin_layout Plain Layout
2
\end_layout

\end_inset


\end_layout

\begin_layout Standard
However, this really happens all at once in a smelter so the effective process
 is:
\end_layout

\begin_layout Standard
3Fe
\begin_inset script subscript

\begin_layout Plain Layout
2
\end_layout

\end_inset

O
\begin_inset script subscript

\begin_layout Plain Layout
3
\end_layout

\end_inset

 + 9CO → 6Fe + 9CO
\begin_inset script subscript

\begin_layout Plain Layout
2
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Fe has a molar mass of 
\begin_inset Formula $55.845g/mol$
\end_inset

, O has a molar mass of 
\begin_inset Formula $15.9994g/mol$
\end_inset

, so 
\begin_inset Formula $479.0646g$
\end_inset

 of Fe
\begin_inset script subscript

\begin_layout Plain Layout
2
\end_layout

\end_inset

O
\begin_inset script subscript

\begin_layout Plain Layout
3
\end_layout

\end_inset

 will produce 
\begin_inset Formula $335.070g$
\end_inset

 of Fe.
 This leads to a 
\noun on
MetalOre
\noun default
 to 
\noun on
Metal
\noun default
 mass conversion rate of 
\begin_inset Formula $0.6994255$
\end_inset


\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Formula $0.46628367$
\end_inset

 volume (resource unit) conversion rate.
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
In order to model the CO consumption, EL assumes that LiquidFuel is RP-1
 (C
\begin_inset script subscript

\begin_layout Plain Layout
12
\end_layout

\end_inset

H
\begin_inset script subscript

\begin_layout Plain Layout
16
\end_layout

\end_inset

) and that Oxidizer is liquid oxygen (O
\begin_inset script subscript

\begin_layout Plain Layout
2
\end_layout

\end_inset

).
 The stoichiometric equation for burning RP-1 is:
\end_layout

\begin_layout Standard
C
\begin_inset script subscript

\begin_layout Plain Layout
12
\end_layout

\end_inset

H
\begin_inset script subscript

\begin_layout Plain Layout
16
\end_layout

\end_inset

 + 16O
\begin_inset script subscript

\begin_layout Plain Layout
2
\end_layout

\end_inset

 → 12CO
\begin_inset script subscript

\begin_layout Plain Layout
2
\end_layout

\end_inset

 + 8H
\begin_inset script subscript

\begin_layout Plain Layout
2
\end_layout

\end_inset

O
\end_layout

\begin_layout Standard
However, rockets tend to burn rich (reduced oxidizer quantity) in order
 to avoid oxidizing the engine, keep the engine cooler, and increase the
 number of lighter molecules in the exhaust.
 KSP's standard 
\noun on
LiquidFuel
\noun default
 and 
\noun on
Oxidizer
\noun default
 mix of 9:11 by volume very closely approximates the following when 
\noun on
LiquidFuel
\noun default
 is assumed to be RP-1 and 
\noun on
Oxidizer
\noun default
 is assumed to be liquid oxygen
\begin_inset Foot
status open

\begin_layout Plain Layout
Note that the exact ratios of the products were arbitrarily chosen but are
 chemically 
\begin_inset Quotes eld
\end_inset

correct
\begin_inset Quotes erd
\end_inset

 (balanced), and that the inclusion of formaldehyde is the result of 
\begin_inset Quotes eld
\end_inset

Hmm, wonder if there's a CH
\begin_inset script subscript

\begin_layout Plain Layout
2
\end_layout

\end_inset

O .
 Oh, there is, and it does appear in partial combustion of hydrocarbons.
 Neat.
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset

 (used for 0% efficient smelting):
\end_layout

\begin_layout Standard
2C
\begin_inset script subscript

\begin_layout Plain Layout
12
\end_layout

\end_inset

H
\begin_inset script subscript

\begin_layout Plain Layout
16
\end_layout

\end_inset

 + 17O
\begin_inset script subscript

\begin_layout Plain Layout
2
\end_layout

\end_inset

 → 2C + 17CO + 4CO
\begin_inset script subscript

\begin_layout Plain Layout
2
\end_layout

\end_inset

 + CH
\begin_inset script subscript

\begin_layout Plain Layout
2
\end_layout

\end_inset

O + 7H
\begin_inset script subscript

\begin_layout Plain Layout
2
\end_layout

\end_inset

 + 8H
\begin_inset script subscript

\begin_layout Plain Layout
2
\end_layout

\end_inset

O
\end_layout

\begin_layout Standard
The resulting equation for 100% efficient
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Arbitrary assumption.
\end_layout

\end_inset

 smelting thus becomes:
\end_layout

\begin_layout Standard
10Fe
\begin_inset script subscript

\begin_layout Plain Layout
2
\end_layout

\end_inset

O
\begin_inset script subscript

\begin_layout Plain Layout
3
\end_layout

\end_inset

 + 2C
\begin_inset script subscript

\begin_layout Plain Layout
12
\end_layout

\end_inset

H
\begin_inset script subscript

\begin_layout Plain Layout
16
\end_layout

\end_inset

 + 17O
\begin_inset script subscript

\begin_layout Plain Layout
2
\end_layout

\end_inset

→ 20Fe + 24CO
\begin_inset script subscript

\begin_layout Plain Layout
2
\end_layout

\end_inset

 + 16H
\begin_inset script subscript

\begin_layout Plain Layout
2
\end_layout

\end_inset

O
\end_layout

\begin_layout Standard
C
\begin_inset script subscript

\begin_layout Plain Layout
12
\end_layout

\end_inset

H
\begin_inset script subscript

\begin_layout Plain Layout
16
\end_layout

\end_inset

 has a molar mass of 
\begin_inset Formula $160.25544g/mol$
\end_inset

, CO
\begin_inset script subscript

\begin_layout Plain Layout
2
\end_layout

\end_inset

 has a molar mass of 
\begin_inset Formula $44.0095g/mol$
\end_inset

, H
\begin_inset script subscript

\begin_layout Plain Layout
2
\end_layout

\end_inset

O has a molar mass of 
\begin_inset Formula $18.01528g/mol$
\end_inset

, C 
\begin_inset Formula $12.0107g/mol$
\end_inset

, CO 
\begin_inset Formula $28.0101g/mol$
\end_inset

, CH
\begin_inset script subscript

\begin_layout Plain Layout
2
\end_layout

\end_inset

O 
\begin_inset Formula $30.02598g/mol$
\end_inset

, H
\begin_inset script subscript

\begin_layout Plain Layout
2
\end_layout

\end_inset

 
\begin_inset Formula $2.01588g/mol$
\end_inset

.
 Thus the two equations become the following when viewed as masses:
\end_layout

\begin_layout Standard
320.51088 + 543.9796 → 24.0214 + 476.1717 + 176.038 + 30.02598 + 14.11116 + 144.12224
\end_layout

\begin_layout Standard
1596.882 + 320.51088 + 543.9796 → 1116.9 + 1056.228 + 288.24448.
\end_layout

\begin_layout Standard
The mass conversion rate of 
\noun on
MetalOre
\noun default
 to 
\noun on
Metal
\noun default
 is still 0.6994255.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="19" columns="7">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0pt">
<column alignment="right" valignment="top" width="0pt">
<column alignment="right" valignment="top" width="0pt">
<column alignment="right" valignment="top" width="0pt">
<column alignment="right" valignment="top" width="0pt">
<column alignment="right" valignment="top" width="0pt">
<column alignment="right" valignment="top" width="0pt">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Engine
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Thrust (N)
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Isp(s)
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ve (m/s)
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
flow (kg/s)
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
power (W)
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Esp (J/kg)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
24-77
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
16k
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
290
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2843.9
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5.6
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
22.8M
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4.0M
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
48-7S
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20k
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
320
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3138.1
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6.4
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
31.4M
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4.9M
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
aerospike
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
180k
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
340
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3334.2
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
54.0
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
300.1M
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5.6M
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LV-1
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2k
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
315
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3089.1
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.6
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3.1M
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4.8M
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LV-1R
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2k
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
290
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2843.9
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.7
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.8M
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4.0M
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LV-909
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
60k
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
345
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3383.3
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
17.7
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
101.5M
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5.7M
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LV-T30
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
240k
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
310
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3040.0
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
78.9
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
364.8M
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4.6M
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LV-T45
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
215k
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
320
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3138.1
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
68.5
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
337.3M
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4.9M
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mainsail
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1500k
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
310
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3040.0
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
493.4
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.3G
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4.6M
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Mk55
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
120k
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
305
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2991.0
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
40.1
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
179.5M
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4.5M
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
poodle
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
250k
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
350
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3432.3
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
72.8
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
429.0M
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5.9M
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SSME
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1000k
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
315
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3089.1
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
323.7
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.5G
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4.8M
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
skipper
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
650k
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
320
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3138.1
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
207.1
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.0G
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4.9M
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
twin-boar
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2000k
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
300
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2942.0
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
679.8
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.9G
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4.3M
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
rhino
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2000k
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
340
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3334.2
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
599.8
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3.3G
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5.6M
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mammoth
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4000k
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
315
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3089.1
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1294.9
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6.2G
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4.8M
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
rapier
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
180k
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
305
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2991.0
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
60.2
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
269.2M
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4.8M
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vernor
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
12k
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
260
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2549.7
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4.7
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
15.3M
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3.3M
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:Comparison-of-stock"

\end_inset

Comparison of stock KSP LFO engines.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Formula $Thrust$
\end_inset

 and 
\begin_inset Formula $I_{sp}$
\end_inset

 are from the config files.
 
\begin_inset Formula $V_{e}$
\end_inset

 (exhaust velocity) is 
\begin_inset Formula $I_{sp}*g_{0}$
\end_inset

 (9.8066).
 Flow is 
\begin_inset Formula $\frac{thrust}{V_{e}}$
\end_inset

.
 Power is 
\begin_inset Formula $\frac{1}{2}thrust*V_{e}$
\end_inset

.
 
\begin_inset Formula $E_{sp}$
\end_inset

 (energy per kg) is 
\begin_inset Formula $\frac{power}{flow}$
\end_inset

 or 
\begin_inset Formula $\frac{1}{2}V_{e}^{2}$
\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Smelting is assumed to consume 
\begin_inset Formula $8.62MJ/kg$
\end_inset

 of produced 
\noun on
Metal
\noun default

\begin_inset CommandInset citation
LatexCommand cite
key "TMETPS"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
The combustion of 
\noun on
LiquidFuel
\noun default
 and 
\noun on
Oxidizer
\noun default
 is assumed to produce 
\begin_inset Formula $6MJ/kg$
\end_inset

.
 The justification for this comes from analyzing the properties of KSP's
 stock LFO engines and noting that the Poodle (the most efficient) gets
 
\begin_inset Formula $5.9MJ/kg$
\end_inset

 of 
\noun on
LiquidFuel
\noun default
 and 
\noun on
Oxidizer
\noun default
 (see table 
\begin_inset CommandInset ref
LatexCommand vref
reference "tab:Comparison-of-stock"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Standard
Thus, EL's smelters nominally
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
The actual rates vary with the smelter: 
\begin_inset Formula $800g/s$
\end_inset

, 
\begin_inset Formula $3149.8g/s$
\end_inset

 and 
\begin_inset Formula $5000g/s$
\end_inset

 of LFO, with the other rates scaled accordingly.
\end_layout

\end_inset

 consume 
\begin_inset Formula $864.49048g/s$
\end_inset

 of 
\noun on
LiquidFuel
\noun default
 and 
\noun on
Oxidizer
\noun default
 to produce 
\begin_inset Formula $5186.94288kJ/s$
\end_inset

 of heating along with the products necessary for smelting.
 At 100% efficiency, they consume 
\begin_inset Formula $1596.882g/s$
\end_inset

 of 
\noun on
MetalOre
\noun default
 and 
\begin_inset Formula $9627.678kJ/s$
\end_inset

 of heat while producing 
\begin_inset Formula $1116.9g/s$
\end_inset

 of 
\noun on
Metal
\noun default
.
 Thus 100% efficiency is unobtainable as there is insufficient heat supplied
 by the LFO mix.
 In theory, the attainable efficiency is a bit less than 53.9%, but due to
 transferred resources cooling the smelter
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
And an engineering mistake in the smelter design.
 Some kerbals will miss out on snacks.
\end_layout

\end_inset

, the maximum efficiency appears to be about 40%.
\end_layout

\begin_layout Subsubsection
Working: 
\noun on
Metal
\noun default
 to 
\noun on
RocketParts
\end_layout

\begin_layout Standard

\noun on
Metal
\noun default
 is converted to 
\noun on
RocketParts
\noun default
 by working it.
 Currently, this is done using either the workshop (big blue part in Utilities),
 or the workbench (tower with little platforms in Pods).
 Unfortunately, the process is quite bogus: 
\noun on
Metal
\noun default
 is used for for everything, and the conversion speed is probably too fast.
 However, the efficiency (
\begin_inset Formula $0.7$
\end_inset

 by mass) is reasonable: it is the estimated average of various means of
 production: cutting cast iron parts leads to high efficiency, but cutting
 lumps of steel can lead to fairly low efficiency depending on just how
 much metal needs to be cut away.
 At the same time, 
\noun on
ScrapMetal
\noun default
 is produced at a rate of 
\begin_inset Formula $0.295$
\end_inset

 by mass (some scraps are lost).
\end_layout

\begin_layout Subsubsection
Remelting: 
\noun on
ScrapMetal
\noun default
 to 
\noun on
Metal
\end_layout

\begin_layout Standard

\noun on
ScrapMetal
\noun default
 can optionally be remelted to 
\noun on
Metal
\noun default
 using a smelter.
 The process is lossless (conversion rate of 
\begin_inset Formula $1$
\end_inset

), the loss (very small) occurs when producing the 
\noun on
ScrapMetal
\noun default
.
 Storing and reclaiming 
\noun on
ScrapMetal
\noun default
 is fully optional: running out of storage will not stop 
\noun on
Metal
\noun default
 to 
\noun on
RocketParts
\noun default
 conversion.
\end_layout

\begin_layout Subsubsection
Building: 
\noun on
RocketParts
\noun default
 to 
\noun on
Rockets
\end_layout

\begin_layout Standard
Building is done by the launchpads, orbital dock, or survey station (or
 just 
\begin_inset Quotes eld
\end_inset

pads
\begin_inset Quotes erd
\end_inset

 for short).
 The rate is governed by the overall vessel productivity (measured in kerbal-hou
rs (Khr)) shared amongst active pads.
 Each ton of rocket (dry-mass) requires five kerbal-hours (i.e.
 
\begin_inset Formula $5Kh/t$
\end_inset

).
\end_layout

\begin_layout Standard
There have been discussions that EL's build rate is too high compared to
 Kerbal Construction Time, but those arguing that side were unaware that
 
\noun on
RocketParts
\noun default
 represent components to be assembled into the parts visible in KSP.
 The building process is really just the kerbals putting those components
 together.
 It is the smelting and working stages that are unrealistically fast.
\end_layout

\begin_layout Subsubsection
Recycling: 
\noun on
RocketParts
\noun default
 to 
\noun on
ScrapMetal
\end_layout

\begin_layout Standard
Recycling is done on a part-by-part basis
\begin_inset Marginal
status collapsed

\begin_layout Plain Layout
Some of you may have had spotty results recycling entire vessels: that is
 intentional, and there is a way around it (see if you can guess).
\end_layout

\end_inset

.
 When a part is recycled, it is first drained of any resources it contains
 (e.g., 
\noun on
LiquidFuel
\noun default
 or 
\noun on
Oxidizer
\noun default
), and those resources will evaporate, be broken down into other resources
 to be reclaimed, or transferred and thus reclaimed depending on the resource
 (most will be transferred).
 Once the part has been drained, it will be broken down from 
\noun on
RocketParts
\noun default
 to 
\noun on
ScrapMetal
\noun default
 and the 
\noun on
ScrapMetal
\noun default
 reclaimed.
\end_layout

\begin_layout Standard
Of course, any reclaimed resource needs storage space.
 Otherwise, it will be lost.
\end_layout

\begin_layout Subsection
Productivity
\end_layout

\begin_layout Standard
All kerbals have a base productivity score determined by their stupidity,
 courage, and bad-ass characteristics.
 The more stupid a kerbal is, the less that kerbal will contribute to the
 workshop's (and thus the overall vessel's) productivity, and more courageous
 kerbals will, in general, contribute less than less courageous kerbals,
 though bad-ass kerbals complicate the relationship.
 It is entirely possible for a kerbal to have negative productivity.
\end_layout

\begin_layout Standard
If the KerbalStats
\begin_inset CommandInset citation
LatexCommand cite
key "KS"
literal "true"

\end_inset

 mod is installed, then the amount of time a kerbal has spent in certain
 workshops (currently only EL's blue workshop (afaik)) improves the kerbal's
 productivity.
\end_layout

\begin_layout Standard
A workshop's productivity is the sum of the productivities of all kerbals
 working in that shop.
 A vessel's productivity is the sum of the productivities of all workshops
 in that vessel.
 If the vessel's productivity is greater than zero, then construction will
 progress.
 Negative productivity does not cause production to become destruction,
 instead it causes a productivity deficit that must be overcome by better
 construction kerbals before construction will proceed.
\end_layout

\begin_layout Subsection
Construction Skill
\end_layout

\begin_layout Standard
Kerbals with the construction skill (by default, engineers, but hereon referred
 to as construction kerbals) are the cornerstone of workshop productivity.
 However, their space-faring (stock) experience affects their productivity
 greatly.
\end_layout

\begin_layout Description
0
\begin_inset space ~
\end_inset

stars The kerbal can work in a fully equipped workshop.
\end_layout

\begin_layout Description
1
\begin_inset space ~
\end_inset

star The kerbal can work in any workshop.
\end_layout

\begin_layout Description
2
\begin_inset space ~
\end_inset

stars The kerbal is always productive in a fully equipped workshop (base
 productivity still matters, but to get negative productivity, the kerbal
 would have to have infinitely negative base productivity).
\end_layout

\begin_layout Description
3
\begin_inset space ~
\end_inset

stars The kerbal is always productive in any workshop.
\end_layout

\begin_layout Description
4
\begin_inset space ~
\end_inset

stars The kerbal enables skilled workers in any workshop (a 4-star construction
 kerbal in an under-equipped workshop allows 0-star construction kerbals
 to contribute).
\end_layout

\begin_layout Description
5
\begin_inset space ~
\end_inset

stars The kerbal enables unskilled workers in a fully equipped workshop
 (a 5-star construction kerbal in a fully equipped workshop allows any kerbal,
 even those without the construction skill, to contribute).
\end_layout

\begin_layout Subsubsection
Unskilled kerbals
\end_layout

\begin_layout Standard
Unskilled kerbals cannot work unless a 5-star construction kerbal is present
 in the same workshop, and the workshop must be fully equipped, but if the
 kerbal's experience level is 2 or less, and the kerbal's base productivity
 is negative, the kerbal will detract from the workshop's productivity.
\end_layout

\begin_layout Subsubsection
Non-career modes
\end_layout

\begin_layout Standard
In sandbox (and science?) mode, all kerbals are level 5, so there will be
 no negative contributions, and if there is at least one construction kerbal
 in the workshop, then all kerbals of sufficient ability will contribute.
\end_layout

\begin_layout Subsection
Workshops
\end_layout

\begin_layout Standard
Workshops, too, affect productivity.
 All workshops have a productivity factor that is multiplied by the sum
 of the productivities of the kerbals working in that shop.
 The resulting productivity is then passed to the vessel.
\end_layout

\begin_layout Subsubsection
Fully equipped
\end_layout

\begin_layout Standard
\begin_inset Marginal
status collapsed

\begin_layout Plain Layout
For role-play purposes, 
\begin_inset Quotes eld
\end_inset

fully equipped
\begin_inset Quotes erd
\end_inset

 can be thought of as the workshop having all the necessary tools, and the
 productivity factor as being the quality of the tools or the level of automatio
n available.
\end_layout

\end_inset

Fully equipped workshops are those with a productivity factor of 1.0 or more,
 or specially marked workshops with lower productivity factors.
 EL's blue workshop, and the rocket workbench are both fully equipped workshops.
\end_layout

\begin_layout Subsubsection
Other parts
\end_layout

\begin_layout Standard
All stock crewed parts act as under-equipped workshops.
 In addition, all crewed command pods, including those from other mods,
 act as under-equipped workshops.
 Many base-building mods (eg, KPBS
\begin_inset CommandInset citation
LatexCommand cite
key "kpbs"
literal "false"

\end_inset

, Pathfinder
\begin_inset CommandInset citation
LatexCommand cite
key "Path"
literal "true"

\end_inset

) provide workshops (refer to those mods for details).
\end_layout

\begin_layout Subsection
Pads
\end_layout

\begin_layout Standard
All construction is done at 
\begin_inset Quotes eld
\end_inset

pads
\begin_inset Quotes erd
\end_inset

, whether the pad is an orbital dock, a launchpad, a survey site (marked
 out using survey stakes and managed by a survey station), or a micro-pad.
\end_layout

\begin_layout Standard
Initiating construction is the same for everything: open the build window
 (via either the toolbar button (blizzy's toolbar
\begin_inset CommandInset citation
LatexCommand cite
key "TB"
literal "true"

\end_inset

, or the stock app button), or the Show UI button in the PAW
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Part Action Window (right-click menu)
\end_layout

\end_inset

), select the craft to build, and press the Build button.
 Between selecting the craft to build and pressing the Build button, the
 required and optional resources for the build will be displayed in a preview.
 There is no need to have all the required resources on-hand when beginning
 the build: if they run out during the build, the build will stop until
 the resources become available and then automatically resume.
 The resources can become available via supply runs or local processing.
\end_layout

\begin_layout Subsubsection
Launchpads and Orbital Docks
\end_layout

\begin_layout Standard
Technically, there is no difference between a launchpad and an orbital dock:
 they operate exactly the same way.
 The difference comes in the physical form of the parts: launchpads are
 optimized for grounded operation, and the orbital dock is optimized for
 orbital operation.
\end_layout

\begin_layout Subsubsection
Survey Stations and Survey Stakes
\end_layout

\begin_layout Standard
Survey stations use local survey sites to specify the location and orientation
 of the built vessel.
 Survey sites are sets of one or more survey stakes with the same name
\begin_inset Marginal
status collapsed

\begin_layout Plain Layout
A stake's name defaults to the name of the kerbal who planted it with 
\begin_inset Quotes eld
\end_inset

Base
\begin_inset Quotes erd
\end_inset

 appended.
 Thus if 
\noun on
Valentina
\noun default
 plants a stake, it will be named 
\noun on
Valentina Kerman Base
\noun default
.
 Thus, when creating a site consisting of more than one stake, it is easiest
 to have only one kerbal do the stake planting.
 Also, if multiple local sites are desired, getting a different kerbal to
 plant the stakes for each site will make it easier.
\end_layout

\end_inset

 and within range (200m) of each other.
\end_layout

\begin_layout Subsubsection
Micro-Pad
\end_layout

\begin_layout Standard
The micro-pad is a single-use construction point.
 When the build is finalized, the pad self-destructs and the build is attached
 to the parent vessel as if the build had been placed there in the editor
 (VAB or SPH).
 Also, the micro-pad can be carried on a kerbal's back using KIS
\begin_inset CommandInset citation
LatexCommand cite
key "KIS"
literal "true"

\end_inset

.
\end_layout

\begin_layout Standard
The orientation and position of the build is controlled by the combination
 of the orientation and position of the micro-pad, and the automatically
 selected attach node of the root part.
 The colored diamonds on the micro-pad indicate the orientation of the root
 part when its bottom node is selected (red = +X, blue = +Z, cyan = -X,
 yellow = -Z
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Hopefully the colors are distinct enough that any suffering from colorblindness
 can distinguish at least one diamond.
 The pad's default orientation in the VAB is such that red (+X) points to
 the VAB door, blue (+Z) points to the north wall, cyan (-X) to the west
 and yellow (-Z) to the south.
\end_layout

\end_inset

.
 It is important to remember that when the micro-pad is facing up, the root
 part's selected node will be facing down, having been rotated around the
 part's Z axis.
\end_layout

\begin_layout Standard
The micro-pad automatically selects the attach node of the root part by
 searching for the first available (unattached) node.
 First the bottom node is checked, then the top node, then any remaining
 nodes in the order they are found.
 Thus a small amount of control over which node is selected can be obtained
 simply by attaching parts to the undesired nodes.
\end_layout

\begin_layout Section
Survey System
\end_layout

\begin_layout Standard
When landed, orbital docks can be awkward for building as they tend to be
 on top of the building vessel (especially awkward for building rovers as
 getting the rover to the ground can be an issue), and launchpads are highly
 sensitive to ground conditions, and and have their own issues when building
 large vessels.
 Also, they provide no flexibility in placement or orientation of the build.
\end_layout

\begin_layout Standard
EL's survey system greatly eases the seeding (or even complete build-out)
 of bases, and works equally well for building ships and other vessels.
 However, it does have one disadvantage: any optional resources (liquid
 fuel, oxidizer, electric charge, etc) will 
\emph on
not
\emph default
 be transferred: the build will be empty of such resources (freedom is not
 free), but as KIS
\begin_inset CommandInset citation
LatexCommand cite
key "KIS"
literal "true"

\end_inset

 is required to place the stakes, and KAS
\begin_inset CommandInset citation
LatexCommand cite
key "KAS"
literal "true"

\end_inset

 is almost always installed with it, this disadvantage should be only minor
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
It can, however, lead to good entertainment: 
\begin_inset CommandInset citation
LatexCommand cite
key "HMV1"
literal "true"

\end_inset


\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
The survey system consists of two parts
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
If you're thinking KSP parts, then it's three: survey station, survey stake,
 and mallet.
\end_layout

\end_inset

: the survey station, and the survey site.
 The survey station (a re-purposed hitchhiker can) is used to keep track
 of the survey sites and do the actual building (it serves the same purpose
 as the orbital dock or a launchpad, but must be landed), and must be flown
 down to the surface in the vicinity of where the builds will occur.
 The survey site is ephemeral: it is marked out by one or more survey stakes
 and is used to specify the location and orientation of the build.
\end_layout

\begin_layout Subsection
Survey Station
\end_layout

\begin_layout Subsubsection
Survey Skill
\end_layout

\begin_layout Standard
Kerbals with the survey skill (by default, pilots, but hereon referred to
 as survey kerbals) affect the range of a survey station according to their
 stock experience level.
 The experience level of the most skilled survey kerbal in the survey station
 is used.
 However, even an unskilled kerbal can man a survey station, and an unmanned
 survey station is still operational.
\end_layout

\begin_layout Description
unmanned 20 meters.
\end_layout

\begin_layout Description
unskilled 50 meters.
\end_layout

\begin_layout Description
0
\begin_inset space ~
\end_inset

stars 100 meters.
\end_layout

\begin_layout Description
1
\begin_inset space ~
\end_inset

star 200 meters.
\end_layout

\begin_layout Description
2
\begin_inset space ~
\end_inset

stars 400 meters.
\end_layout

\begin_layout Description
3
\begin_inset space ~
\end_inset

stars 800 meters.
\end_layout

\begin_layout Description
4
\begin_inset space ~
\end_inset

stars 1600 meters.
\end_layout

\begin_layout Description
5
\begin_inset space ~
\end_inset

stars 2000 meters.
\end_layout

\begin_layout Standard
Note that the range is from the survey vessel's center of mass to the nearest
 stake of the survey site, but stakes may be separated by up to 200 meters
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
This is a bit of a misfeature: the range should be from the survey station
 part and the maximum separation of the stakes should be dependent on the
 skill as well.
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection
Survey Site
\end_layout

\begin_layout Standard
Stakes have two modes with seven settings in each mode (default is Direction:Ori
gin):
\end_layout

\begin_layout Description
Direction these are used to control the orientation of the build.
\end_layout

\begin_deeper
\begin_layout Description
Origin used to mark the location above which the build's root part will
 be placed, and also forms the reference point for other direction stakes
 that aren't in pairs.
\end_layout

\begin_layout Description
-X
\begin_inset space ~
\end_inset

and
\begin_inset space ~
\end_inset

+X used to specify the lateral (port (-X) and starboard (+X)) axis of the
 build (both VAB and SPH).
 If both -X and +X are used, then the origin is is ignored, otherwise the
 axis runs from -X to origin or origin to +X.
\end_layout

\begin_layout Description
-Y
\begin_inset space ~
\end_inset

and
\begin_inset space ~
\end_inset

+Y used to specify the "vertical" (nadir (-Y) and zenith (+Y)) axis of the
 build (relative to the floor in the VAB or SPH).
 If both -Y and +Y are used, then the origin is is ignored, otherwise the
 axis runs from -Y to origin or origin to +Y.
 NOTE: not recommended, very advanced usage.
\end_layout

\begin_layout Description
-Z
\begin_inset space ~
\end_inset

and
\begin_inset space ~
\end_inset

+Z 
\begin_inset Marginal
status collapsed

\begin_layout Plain Layout
The VAB orientation really is weird.
\end_layout

\end_inset

used to specify the ventral(+Z)/dorsal(-Z) (VAB) or fore(+Z)/aft(-Z) (SPH)
 axis of the build.
 If both -Z and +Z are used, then the origin is is ignored, otherwise the
 axis runs from -Z to origin or origin to +Z.
\end_layout

\begin_layout Description
* If none of the axis direction stakes are used, then the default orientation
 is such that the build's +Y axis is the local up, +X axis points east,
 and +Z points north (same as on the KSC launchpad).
\end_layout

\begin_layout Description
* If the axes marked out by the stakes are not perfectly orthogonal, then
 the build will be oriented such that the errors are balanced.
\end_layout

\end_deeper
\begin_layout Description
Bounds these are used to control the placement of the build based on its
 bounding box rather than its root part.
\end_layout

\begin_deeper
\begin_layout Description
Origin used to mark the location of the root part along any axis that has
 not been bound.
\end_layout

\begin_layout Description
-X
\begin_inset space ~
\end_inset

and
\begin_inset space ~
\end_inset

+X used to mark the lateral (port (-X) and starboard (+X)) edges of the
 build.
 If only one of -X or +X is used, then that edge of the build will be exactly
 on that stake, otherwise the the X-axis center of the build's bounding
 box will be centered on the midpoint between the two stakes.
\end_layout

\begin_layout Description
-Y
\begin_inset space ~
\end_inset

and
\begin_inset space ~
\end_inset

+Y used to mark the "vertical" (nadir (-Y) and zenith (+Y)) edges of the
 build.
 If only one of -Y or +Y is used, then that edge of the build will be exactly
 on that stake, otherwise the the Y-axis center of the build's bounding
 box will be centered on the midpoint between the two stakes.
 NOTE: use of the +Y bounds stake is not recommended unless you know what
 you are doing.
\end_layout

\begin_layout Description
-Z
\begin_inset space ~
\end_inset

and
\begin_inset space ~
\end_inset

+Z used to mark the ventral(+Z)/dorsal(-Z) (VAB) or fore(+Z)/aft(-Z) (SPH)
 edges of the build.
 If only one of -Z or +Z is used, then that edge of the build will be exactly
 on that stake, otherwise the the Z-axis center of the build's bounding
 box will be centered on the midpoint between the two stakes.
\end_layout

\end_deeper
\begin_layout Description
* Bounds stakes and direction stakes work together: any unbound axis of
 the build slides along that axis of the reference frame created by the
 direction stakes (or the default frame if no direction stakes are used).
\end_layout

\begin_layout Description
* There is actually only one origin stake: there is no difference between
 a bounds origin stake and a direction origin stake.
 The appearance of there being two origin stakes is due to the overly simple
 controls.
\end_layout

\begin_layout Description
* If multiple stakes of the same type+setting have been placed, then they
 will be averaged together to form a virtual stake of the same type+setting.
 This can be very useful with multiple origin stakes to avoid the build
 clipping into the stake when the lowest part of the build is directly below
 the root part.
\end_layout

\begin_layout Description
* If no origin stakes have been placed, then the average of all other stakes
 is used as the origin point.
\end_layout

\begin_layout Description
* The actual location of the stakes is about 19cm above the ground.
\end_layout

\begin_layout Description
* If no Y bounds stake has been placed, then the origin acts as an implicit
 -Y bounds stake (otherwise almost all builds would spawn in the ground).
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways true
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename base4.svg
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Hillside survey site, somewhere on Minmus.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
This is one possibility for placing stakes for building a large structure
 on the side of a hill.
 From left to right, there's a -Y Bounds stake, a +X Direction stake, a
 +Z Bounds stake with a +X Bounds stake hiding behind it, a flag and kerbal
 (not relevant to the site), and near the far right launch clamp, an Origin
 stake (direction, but bounds would have the same effect).
 Although the top of the structure is not directly visible, it is horizontal.
\end_layout

\end_inset


\end_layout

\begin_layout Section
Designing a construction capable vessel
\end_layout

\begin_layout Subsection
Orbital Construction
\end_layout

\begin_layout Standard
\begin_inset Wrap figure
lines 0
placement O
overhang 20mm
width "30col%"
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename OrbitalDock.svg
	lyxscale 25
	width 50col%
	BoundingBox 0bp 0bp 960bp 540bp

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Orbital Dock
\end_layout

\end_inset


\end_layout

\end_inset

Orbital construction is probably the easiest to get going as all that is
 required is a supply of 
\noun on
RocketParts
\noun default
, an orbital dock, some qualified construction kerbals, and somewhere for
 them to work.
 This means that only two parts need to be added to the design of a station
 that has crewed command pods or any stock crewed part
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
there are mods that supply suitably configured crewed parts
\end_layout

\end_inset

: a reasonably sized 
\noun on
RocketParts
\noun default
 container, and either the orbital dock or the micro-pad.
 When extending an existing station, a suitable docking port would be required
 as well, and means to get the 
\begin_inset Quotes eld
\end_inset

construction unit
\begin_inset Quotes erd
\end_inset

 to the station.
 However, if the micro-pad is used, then the micro-pad needs to be attached
 to the station somewhere using KIS
\begin_inset CommandInset citation
LatexCommand cite
key "KIS"
literal "true"

\end_inset

.
 In fact, the micro-pad can be an excellent way of attaching an orbital
 dock to a station.
\end_layout

\begin_layout Standard
\begin_inset Wrap figure
lines 0
placement O
overhang 20mm
width "30col%"
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename MicroPad.svg
	lyxscale 25
	width 50col%
	BoundingBox 0bp 0bp 960bp 540bp

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Micro-Pad
\end_layout

\end_inset


\end_layout

\end_inset

It can, however, be the most difficult to maintain due to the need for supplies
 to be flown to the station.
 That said, maintaining an orbital construction station can be quite interesting
 as there are a number of options for feeding 
\noun on
RocketParts
\noun default
 into the orbital dock's ravenous maw, each with additional design requirements
 for the station.
\end_layout

\begin_layout Itemize
Firstly, and most simply, 
\noun on
RocketParts 
\noun default
can be flown up from a nearby, or even not so nearby, production base
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
The KSC counts as a production base as all EL resources can be loaded onto
 a vessel at launch time via tweakables.
\end_layout

\end_inset

.
 The only additional requirement for the station is an available docking
 port, but a station with no docking ports is of rather limited use, so
 this requirement is generally not too troublesome (though having enough
 docking ports on a station can be tricky at times).
\end_layout

\begin_layout Itemize
Secondly, 
\noun on
Metal
\noun default
 can be flown to the station and locally processed into 
\noun on
RocketParts
\noun default
.
 Along with an available docking port, this method requires a means of convertin
g 
\noun on
Metal
\noun default
 to 
\noun on
RocketParts
\noun default
.
 This can be done using either the workshop or the rocket workbench, but
 since even the rocket workbench can give a significant boost to production
 speed, the only real disadvantages are the relevant part needs to be either
 flown up to the station and docked or built at the station and maneuvered
 into a convenient location
\begin_inset Marginal
status collapsed

\begin_layout Plain Layout
The rocket workbench can be manhandled into position by two kerbals using
 KIS.
\end_layout

\end_inset

, and the increased power requirements.
 A minor disadvantage is the conversion of 
\noun on
Metal
\noun default
 into 
\noun on
RocketParts
\noun default
 produces 
\noun on
ScrapMetal
\noun default
.
 Normally, the 
\noun on
ScrapMetal
\noun default
 is simply thrown away, but the next solution takes care of that.
\end_layout

\begin_layout Itemize
Thirdly, if 
\noun on
Metal
\noun default
 to 
\noun on
RocketParts
\noun default
 production is already available on the station
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Or is included in the same module as the smelter.
\end_layout

\end_inset

, a smelter can be added to the station allowing 
\noun on
MetalOre 
\noun default
to be flown in and processed into 
\noun on
Metal
\noun default
.
 While this does significantly increase the fuel requirements of the station,
 the smelter is actually dual-use: not only can it convert 
\noun on
MetalOre
\noun default
 into 
\noun on
Metal
\noun default
, but it can convert 
\noun on
ScrapMetal
\noun default
 into 
\noun on
Metal
\noun default
, resulting in very low production losses.
 As an added bonus, the smelters have a small amount of storage for the
 three resources.
\end_layout

\begin_layout Itemize
Fourthly, and finally, a recycling bin can be added to the station.
 EL's recycling bins do not look like much, but they are ravenous maws that
 eat vessels of any size (except asteroids, but including unfortunate kerbals)
 and spit out resources.
 Most resources, except 
\noun on
Ablator
\noun default
 and 
\noun on
SolidFuel
\noun default
, stored in tanks will be reclaimed as-is without loss, and the hull material
 will be recycled into 
\noun on
ScrapMetal
\noun default
.
 For best results, the station needs large quantities of storage and a full
 production chain.
 The biggest advantage of using a recycling bin is unmanned
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Or manned by very brave pilots.
\end_layout

\end_inset

 supply ships can be flown into the recycling bin and recycled.
 If there is sufficient storage on the station, then all remaining fuel
 and any stored resources will be automatically transfered to the station,
 and the hull of the supply ship will go towards the next construction project.
 Unfortunately, if there is insufficient storage for any resource, the the
 excess of that resource will be lost.
\end_layout

\begin_layout Subsection
Grounded Construction
\end_layout

\begin_layout Standard
While more difficult to get going due to the need to fly to the location
 and land safely, grounded construction can be much easier to maintain as
 the site of the construction base can be chosen for optimal resource extraction.
 Thus once production facilities (as described in the orbital construction
 section) are in place, the base can be self-sufficient for a very long
 time.
\end_layout

\begin_layout Standard
The main difference between orbital construction and grounded construction
 is that gravity can make getting built vessels off the pad rather awkward.
 Thus, instead of a launchpad, though launchpads can have their advantages
 (such as resource transfer), the base can be equipped with a survey station,
 a supply of survey stakes, a mallet to drive the stakes, and a KIS
\begin_inset CommandInset citation
LatexCommand cite
key "KIS"
literal "true"

\end_inset

 container in which to store the stakes and mallet.
 As KIS is required for the survey parts to be available, the container
 should not be a problem
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Other mods might provide alternative 
\begin_inset Quotes eld
\end_inset

stakes
\begin_inset Quotes erd
\end_inset

 with a different planting mechanism thus removing the need for KIS.
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsubsection
The Base Kraken
\end_layout

\begin_layout Standard
One thing that makes base building particularly difficult is bases have
 a tendency to slide around on the ground, and even jumping into the air
 and possibly self destructing.
 None of this is helped by the difficulty of finding level ground anywhere
 but the flats of Minmus, and Minmus is so small that despite the flats
 being perfectly 
\begin_inset Quotes eld
\end_inset

flat
\begin_inset Quotes erd
\end_inset


\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Flat Minmus Society, anyone?
\end_layout

\end_inset

, the curvature is such that large sprawling bases have to bend to maintain
 contact with the ground, but generally will not due to Minmus' low gravity.
 Instead, they often tip slightly.
\end_layout

\begin_layout Standard
To solve the problem of bases sliding around, and in attempt to prevent
 them leaping into the air, various mods have implemented solutions involving
 attaching the base parts to the ground
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Really, just to local space, but that's a minor technical PhysX detail.
\end_layout

\end_inset

.
 However, stock KSP provides its own solution that EL's survey system enables:
 launch clamps.
 While launch clamps do have their disadvantages
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
The base can wind up quite high up from the ground.
\end_layout

\end_inset

, they can turn a site that is untenable due to steep terrain into a stable
 and highly productive base: the root part is always level
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Unless a Y direction stake is used.
\end_layout

\end_inset

 with respect to the survey site's origin.
\end_layout

\begin_layout Standard
The above, both the ground anchoring done by other mods and the use of launch
 clamps, helps a lot in preventing bases from sliding around.
 Unfortunately, not so much when it comes to actually preventing a kraken
 attack on scene load.
 In fact, they can make things worse, for a rather counter-intuitive reason:
 the way KSP handles vessels going 
\emph on
on
\emph default
 rails (yes, on, not off).
 The reason these attempts to solve the base kraken can make things worse
 is that instead of the base being thrown away from the ground, it can be
 torn apart by the sometimes very violent forces that are attempting to
 throw the base.
\end_layout

\begin_layout Standard
As for KSP's handling of vessels going on rails...
\end_layout

\begin_layout Standard
KSP records the root-part relative positions and orientations of each part
 of the vessel.
 Normally, these never change
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Robotics parts do change them, and the vessel suffers for it over several
 save-load cycles.
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
When a vessel goes on rails, KSP snaps all parts back to their recorded
 positions and orientations.
 This is readily seen when a wobbly wet-noodle rocket goes on rails
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
ie, entering time-warp, assuming time-warp can be entered and is not blocked
 by 
\begin_inset Quotes eld
\end_inset

vessel is under acceleration
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset

: the rocket snaps straight.
\end_layout

\begin_layout Standard
For a grounded vessel, there are always sagging parts (some more, some less:
 depends on local gravity, part mass, joint spring strength
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Not breaking strength.
\end_layout

\end_inset

, how far the part is from a more securely supported part, etc etc).
 Obviously, the sagging causes flexing.
 Thus when going on rails, the parts are snapped back to their recorded
 root-relative positions and orientations.
\end_layout

\begin_layout Standard
It is the position (and orientation) of the root part that determines the
 vessel's position etc when going on rails, and the vessel's position and
 orientation dictates the root part's position and orientation when going
 off rails.
\end_layout

\begin_layout Standard
Thus, when a ground base's root part sags, even though it may not look it,
 the whole base sags: when the base goes on rails, the base's location is
 determined by the root part, and all the supporting structure is snapped
 into position relative to that, resulting in the supporting parts being
 forced into the ground.
 Then, when the base goes off rails, the colliders of the support parts
 are in the ground and PhysX
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
This is not a bug in KSP, Unity, or PhysX: no physics engine likes interpenetrat
ing colliders, and most produce very non-physical forces in order to separate
 the colliders.
\end_layout

\end_inset

 forces them out resulting in possibly extremely violent forces acting on
 the base, possibly throwing it away from the ground or even tearing the
 base apart.
\end_layout

\begin_layout Standard
Fortunately, the solution lies in the very cause of the problem, and is
 quite simple to implement.
\end_layout

\begin_layout Itemize
Keep the base segment containing the root part very light.
 This means no storage containers for anything massive.
\end_layout

\begin_layout Itemize
Give the root segment solid support such that it will not sag or even tilt.
 This is where the use of launch clamps really helps: they provide the needed
 support before physics is applied to the base.
\end_layout

\begin_layout Itemize
Keep massive storage in adequately supported separate base segments, connected
 to the root segment via relatively flexible lightweight connectors.
 The light weight prevents the connectors weighing excessively on the root
 segment, and the flexibility allows the massive segments to sag without
 dragging the root segment down with them.
 
\emph on
This is not a problem, and is even desirable
\emph default
: when the base goes on rails and KSP snaps the parts into position, the
 base segments will be snapped 
\emph on
away
\emph default
 from the ground instead of into it.
\end_layout

\begin_layout Itemize
Ensure that the root part of the base does not change.
\end_layout

\begin_layout Standard
The last is actually easier than it may sound: KSP has a priority system
 for determining which vessel is the 
\begin_inset Quotes eld
\end_inset

mother ship
\begin_inset Quotes erd
\end_inset

 (thus which root part remains root after coupling) when two vessels dock.
\end_layout

\begin_layout Description
vessel
\begin_inset space ~
\end_inset

type Base > Station > Plane > Ship > Lander > Rover > Relay > Probe > Space
 Object (asteroid) > Debris.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Docking a station to a base...
 neat trick.
\end_layout

\end_inset


\end_layout

\begin_layout Description
relative
\begin_inset space ~
\end_inset

mass The vessel with the greater mass becomes the 
\begin_inset Quotes eld
\end_inset

mother ship
\begin_inset Quotes erd
\end_inset

.
 For otherwise identical ships, resource loads will make a difference.
\end_layout

\begin_layout Description
vessel
\begin_inset space ~
\end_inset

id While the order may appear random, it will be consistent, but the mass
 tolerance is pretty tight, so this is pretty rare.
\end_layout

\begin_layout Standard
Thus, if the root segment is made a base early on, it 
\emph on
should
\emph default
 remain the root throughout the life of the base unless the base is connected
 to a more massive base (at the time of connection).
\end_layout

\begin_layout Subsection
Roughing It
\end_layout

\begin_layout Standard
\begin_inset Note Greyedout
status open

\begin_layout Plain Layout
NOTE: this section is out of date as it is relevant for when smelters required
 only 
\noun on
ElectricCharge
\noun default
 and not 
\noun on
LiquidFuel
\noun default
 and 
\noun on
Oxidizer
\noun default
.
 However, it should still serve as inspiration.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This is grounded construction the hard way
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
My preferred way.
\end_layout

\end_inset

.
 The absolute minimum is flown to a site and the first things constructed
 are the modules needed to sustain construction.
\end_layout

\begin_layout Paragraph
Parts and resources to be flown in:
\end_layout

\begin_layout Description
Suvery
\begin_inset space ~
\end_inset

Station Needed to do the building on the marked site.
 This doubles as a workshop, though productivity is poor.
\end_layout

\begin_layout Description
Survey
\begin_inset space ~
\end_inset

Stakes Needed to mark where to build.
\end_layout

\begin_layout Description
Mallet Needed to drive the stakes.
\end_layout

\begin_layout Description
RocketParts Only a very small quantity is needed: 
\begin_inset Formula $3.5328t$
\end_inset

 is the minimum, though a little more is recommended.
\end_layout

\begin_layout Description
KAS
\begin_inset CommandInset citation
LatexCommand cite
key "KAS"
literal "true"

\end_inset


\begin_inset space ~
\end_inset

Pipe
\begin_inset space ~
\end_inset

Connectors Needed to attach the build modules to allow resource transfer.
\end_layout

\begin_layout Description
KIS
\begin_inset CommandInset citation
LatexCommand cite
key "KIS"
literal "true"

\end_inset


\begin_inset space ~
\end_inset

Screwdriver While the wrench may be sufficient for attaching pipe connecters,
 the screwdriver is more versatile.
\end_layout

\begin_layout Paragraph
Modules to be built first:
\end_layout

\begin_layout Description
Tiny
\begin_inset space ~
\end_inset

Auger 
\begin_inset Formula $0.5328t$
\end_inset

 This is the smallest auger supplied by EL.
 Needed to extract MetalOre.
\end_layout

\begin_layout Description
Tiny
\begin_inset space ~
\end_inset

Smelter 
\begin_inset Formula $1.5t$
\end_inset

 This is the smallest smelter suppllied by EL.
 Needed to convert MetalOre to Metal.
\end_layout

\begin_layout Description
Rocket
\begin_inset space ~
\end_inset

Workbench 
\begin_inset Formula $1.5t$
\end_inset

 While this is needed for converting Metal to RocketParts, it is also a
 fully equipped workshop with room for four kerbals.
 Once this is built, construction kerbals can be moved from the survey station
 to the workbench, significantly increasing productivity and thus allowing
 later builds to progress at a faster rate.
\end_layout

\begin_layout Standard
Once the required modules have been built, base production can go into full
 swing, even the construction of larger resource production chain, including
 recycling and the full-sized workshop.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways true
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename gilly_base.svg
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Gilly Base
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
The base started with just a tiny seed lander, but eventually flourished
 into a productive base...
 until the kethane supply ran out :/
\end_layout

\end_inset


\end_layout

\begin_layout Part
Modding Extraplanetary Launchpads
\end_layout

\begin_layout Section
Configuration
\end_layout

\begin_layout Subsection
Part Modules
\end_layout

\begin_layout Standard
For the most part, EL places no restrictions on the models used for parts
 using EL's module, so unless otherwise stated, models are completely free-form
 as far as EL is concerned.
\end_layout

\begin_layout Subsubsection
ELControlReference
\end_layout

\begin_layout Standard
Allows the part to become a control reference (
\begin_inset Quotes eld
\end_inset

Control From Here
\begin_inset Quotes erd
\end_inset

 in the part's PAW).
 Also provides a 
\begin_inset Quotes eld
\end_inset

Toggle Reference
\begin_inset Quotes erd
\end_inset

 action group that saves the previous control reference when becoming the
 reference and returns the vessel to the previous reference when toggled
 again.
\end_layout

\begin_layout Paragraph
Model Requirements
\end_layout

\begin_layout Standard
The model's mesh needs an emissive material with 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
_EmissiveColor
\end_layout

\end_inset

 set with appropriate RGB values.
 The alpha value is used for turning the emission on and off as a status
 indicator.
 The part's root game object is used as the reference transform consistent
 with command pods and docking ports, so the model should be shaped appropriatel
y.
\end_layout

\begin_layout Paragraph
Part Requirements
\end_layout

\begin_layout Standard
None
\end_layout

\begin_layout Paragraph
Module Fields
\end_layout

\begin_layout Standard
None
\end_layout

\begin_layout Subsubsection
ELConverter
\end_layout

\begin_layout Standard
Consumes a set of input resources to produce a set of output resources.
 An EL converter uses a converter recipe (see 
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:Recipes-for-Converting"
plural "false"
caps "false"
noprefix "false"

\end_inset

) to specify the inputs and outputs while controlling the rate of flow of
 the resources specified by the active input recipe and distributing the
 recipes specified by the active output recipe.
 The active input and output recipes are selected by the current efficiency
 of the converter, and may be a blend between two specified recipes.
 The efficiency of the converter is either fixed, or determined by the temperatu
re of the converter part.
\end_layout

\begin_layout Standard
\begin_inset Flex Code
status open

\begin_layout Plain Layout
ELConverter
\end_layout

\end_inset

 subtracts the total input heat from the part and adds the total output
 heat to the part (use negative heats to have heating associated with input
 ingredients and cooling with output ingredients).
\begin_inset Marginal
status collapsed

\begin_layout Plain Layout
Note that KSP's thermal data in the PAW does not directly show the effects
 of resource transfer on the part's temperature, so there may be significant
 thermal flux despite the temperature being fairly stable.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If an efficiency curve
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
For certain values of 
\begin_inset Quotes eld
\end_inset

curve
\begin_inset Quotes erd
\end_inset

: it's piece-wise linear.
\end_layout

\end_inset

 has been specified, then the converter's efficiency is determined by the
 part's internal temperature (otherwise the efficiency is constant).
 The converter's efficiency is then used to bake the converter recipe into
 a specific conversion recipe.
\end_layout

\begin_layout Standard
Once the specific conversion recipe has been obtained, 
\noun on

\begin_inset Flex Code
status open

\begin_layout Plain Layout

\noun off
ELConverter
\end_layout

\end_inset


\noun default
 then bakes that recipe using the current mass flow rate.
 The current mass flow rate is the specified rate of the converter scaled
 by the relative mass of the active input recipe compared to the smallest
 mass input recipe in the converter recipe.
 This keeps the mass flow of certain resources constant while varying the
 flow of others appropriately
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
For example, in a smelter, 
\noun on
LiquidFuel
\noun default
 and 
\noun on
Oxidizer
\noun default
 flow at a constant rate, while 
\noun on
MetalOre
\noun default
 is not consumed at all at 0% efficiency, but is consumed at the maximum
 rate at 100%.
 Thus the actual mass flow rate might vary from 864.49048g/s to 2461.37248g/s.
\end_layout

\end_inset

 when suitable ratios are specified.
 The mass flow rate of the output recipe is always the same as that of the
 input recipe
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Conservation of mass.
\end_layout

\end_inset

.
\end_layout

\begin_layout Paragraph
Model Requirements
\end_layout

\begin_layout Standard
None
\end_layout

\begin_layout Paragraph
Part Requirements
\end_layout

\begin_layout Standard
None.
 However, it is strongly recommended to use appropriate thermal settings
 for converters that use heat.
 In particular, 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
skinInternalConductionMult
\end_layout

\end_inset

 and 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
heatConductivity
\end_layout

\end_inset

 should be adjusted to provided sufficient insulation when keeping the part
 hot is necessary.
\end_layout

\begin_layout Paragraph
Module Fields
\end_layout

\begin_layout Description
EVARange Adjust the range (in meters) from which an EVA kerbal can activate
 or deactivate the converter.
 Default is 
\begin_inset Formula $1.5m$
\end_inset

.
\end_layout

\begin_layout Description
ConverterRecipe The name of the converter recipe to use.
 Required.
\end_layout

\begin_layout Description
Rate The base mass flow rate of the converter, in 
\begin_inset Formula $kg/s$
\end_inset

.
 Defaults to 
\begin_inset Formula $0$
\end_inset

.
 The base mass flow rate is that of the smallest mass input recipe in the
 converter recipe.
\end_layout

\begin_layout Description
efficiency Specify the efficiency/temperature curve of the converter.
 Defaults to constant 
\begin_inset Formula $1.0$
\end_inset

 (100%).
 If a single 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
efficiency
\end_layout

\end_inset

 entry is given, then it specifies a constant efficiency and is of the form
 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Flex Code
status open

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
efficiency = 0.9
\end_layout

\end_inset


\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\xout default
\uuline default
\uwave default
\noun default
\color inherit
 (90%).
 If multiple 
\noun on
efficiency
\noun default
 entries are given, then they form keys in a piece-wise linear 
\begin_inset Quotes eld
\end_inset

curve
\begin_inset Quotes erd
\end_inset

.
 Each entry is of the form 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Flex Code
status open

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
efficiency = temp, eff
\end_layout

\end_inset


\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\xout default
\uuline default
\uwave default
\noun default
\color inherit
 where 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
temp
\end_layout

\end_inset

 is the part's internal temperature in Kelvin and 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
eff
\end_layout

\end_inset

 is the converter's efficiency at that temperature.
 Note that the keys need to be specified in ascending order of temperature
 and 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
eff
\end_layout

\end_inset

 should be between 
\begin_inset Formula $0.0$
\end_inset

 and 
\begin_inset Formula $1.0$
\end_inset

 (inclusive)
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
No checking is performed, so expect rhinodaemons should this rule be broken.
\end_layout

\end_inset

.
 For temperatures outside the range of the curve, the nearest key is extrapolate
d with a constant efficiency.
\end_layout

\begin_layout Subsubsection
ELDisposablePad
\end_layout

\begin_layout Standard
Special one-shot launchpad that replaces itself with the built vessel, attaching
 the built vessel to the vessel owning the pad.
\end_layout

\begin_layout Paragraph
Model Requirements
\end_layout

\begin_layout Standard
The only requirement is the model provides a transform with the up axis
 (positive Y-axis in KSP/Unity, Z-axis in Blender) pointing 
\series bold
\emph on
away
\series default
\emph default
 from where the spawned vessel will be as it will be used to align the selected
 attach node of the vessel's root part.
 This is the opposite direction of the transform used by 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
ELLaunchpad
\end_layout

\end_inset

.
\end_layout

\begin_layout Paragraph
Part Requirements
\end_layout

\begin_layout Standard
None.
\end_layout

\begin_layout Paragraph
Module Fields
\end_layout

\begin_layout Description
SpawnTransform Specifies the model transform to be used as the launch transform.
 Optional, but using a spawn transform makes the virtual attach node independent
 of the part's transform.
\end_layout

\begin_layout Description
PadName Specifies the name of the launchpad.
 Note that this is editable by the user both in the editor (VAB/SPH) or
 in flight.
\end_layout

\begin_layout Description
Operational Persistent backing for 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
ELControlInterface.canOperate
\end_layout

\end_inset

.
 Defaults to 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
true
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsubsection
ELExtractor
\end_layout

\begin_layout Standard
Extracts resources from the environment.
 Note that 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
ELExtractor
\end_layout

\end_inset

 works with both the stock resource system and with Kethane (auto-detected
 if installed).
 Can (with a little work
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Currently, this would require modifying EL's source to search for implementers
 of IResourceProvider instead of simply adding the stock and Kethane (if
 installed) providers.
\end_layout

\end_inset

) be extended to support other resource providers.
 All supported providers are treated equally in that the amount of resource
 extracted from a provider is based on that provider's contribution to the
 available resource at the location of extractor part's ground-hit location.
 For example with Kethane installed, EL's auger will extract 
\noun on
MetalOre
\noun default
 from a Kethane deposit at a rate slightly lower than specified by 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Rate
\end_layout

\end_inset

 in the module files because the stock resource system will provide a certain
 amount (based on concentration) as well, resulting in the total rate of
 extraction being as specified, but if the auger misses a Kethane-based
 deposit, the extraction rate will be determined by concentration multiplied
 by the specified rate.
\end_layout

\begin_layout Paragraph
Model Requirements
\end_layout

\begin_layout Standard
\begin_inset Flex Code
status open

\begin_layout Plain Layout
ELExtractor
\end_layout

\end_inset

 requires the model to have a head transform (goes into the ground) and
 a tail transform (does not go into the ground).
 The transforms are used to do a physics ray-cast to determine both whether
 the extractor has ground contact and the exact location of that contact.
 The head transform must be outside any colliders in order to allow it into
 the ground (visual mesh that penetrates the ground poses no problem).
 The tail transform may be either inside or outside any colliders, but inside
 is recommended to ensure that it cannot go into the ground.
 The transforms may be animated: the ray-cast is performed each frame.
\end_layout

\begin_layout Paragraph
Part Requirements
\end_layout

\begin_layout Standard
None.
\end_layout

\begin_layout Paragraph
Module Fields
\end_layout

\begin_layout Description
EVARange Adjust the range (in meters) from which an EVA kerbal can activate
 or deactivate the extractor.
 Default is 
\begin_inset Formula $1.5m$
\end_inset

.
\end_layout

\begin_layout Description
ResourceName The name of the resource to extract.
 Required.
\end_layout

\begin_layout Description
Rate The flow rate of the extractor, in 
\begin_inset Formula $u/s$
\end_inset

 (resource units/second).
 Defaults to 
\begin_inset Formula $0$
\end_inset

.
\end_layout

\begin_layout Description
flowMode How the extracted resource is distributed through the extractor
 vessel.
 Defaults to 
\noun on

\begin_inset Flex Code
status open

\begin_layout Plain Layout

\noun on
ALL_VESSEL
\end_layout

\end_inset

.
\end_layout

\begin_layout Description
HeadTransform The name of the model transform used as the target of the
 ray-cast used to detect ground contact.
 This is the point of the model that needs to be in the ground for the part
 to be considered in contact with the ground.
\end_layout

\begin_layout Description
TailTransform The name of the model transform used as the source of the
 ray-cast used to detect ground contact.
 This is the point of the model that needs to be out of the ground for the
 part to be considered in contact with the ground.
\end_layout

\begin_layout Description
INPUT_RESOURCE{} Note that this is a node.
 This is as per the stock resource extraction module (
\begin_inset Flex Code
status open

\begin_layout Plain Layout
ELExtractor
\end_layout

\end_inset

 is derives from 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
BaseDrill
\end_layout

\end_inset

, so many of 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
BaseDrill
\end_layout

\end_inset

's fields and nodes are relevant).
\end_layout

\begin_layout Subsubsection
ELLaunchpad
\end_layout

\begin_layout Standard
Builds complete vessels attached (pseudo-docked) to the current vessel.
 Allows post-build resource transfer without any extra fuss.
 Supports building both landed or in orbit.
\end_layout

\begin_layout Paragraph
Model Requirements
\end_layout

\begin_layout Standard
No requirements, but it is highly recommended that the part has plenty of
 free space 
\begin_inset Quotes eld
\end_inset

above
\begin_inset Quotes erd
\end_inset

 (positive Y-axis in KSP/Unity, Z-axis in Blender) the launch transform.
\end_layout

\begin_layout Paragraph
Part Requirements
\end_layout

\begin_layout Standard
None.
\end_layout

\begin_layout Paragraph
Module Fields
\end_layout

\begin_layout Description
SpawnHeightOffset Specifies the distance in meters above the launch transform
 of the lowest point of the spawned vessel.
 This is most useful when the model does not have a specific spawn transform.
 Defaults to 
\begin_inset Formula $0.0m$
\end_inset

.
\end_layout

\begin_layout Description
SpawnTransform Specifies the model transform to be used as the launch transform.
 Optional, but using a spawn transform allows finer control over the launch
 position than that afforded by 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
SpawnHeightOffset
\end_layout

\end_inset

, and also allows the orientation to be specified.
 If not specified, the model's root transform will be used as the launch
 transform (setting 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
SpawnHeightOffset
\end_layout

\end_inset

 is highly recommended, but not as highly as having a spawn transform).
\end_layout

\begin_layout Description
PadName Specifies the name of the launchpad.
 Note that this is editable by the user both in the editor (VAB/SPH) or
 in flight.
\end_layout

\begin_layout Description
Operational Persistent backing for 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
ELControlInterface.canOperate
\end_layout

\end_inset

.
 Defaults to 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
true
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsubsection
ELNoControlSwitch
\end_layout

\begin_layout Standard
Resets the vessel's control reference to what it was before a kerbal boards
 the external command seat.
 Used by the rocket workbench to prevent the vessel getting weird control
 references
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Imagine how annoying this can be when using SAS hold option on a bendy station.
 Now imagine the motivation for creating this part module.
\end_layout

\end_inset

.
\end_layout

\begin_layout Paragraph
Model Requirements
\end_layout

\begin_layout Standard
Somewhere for a kerbal to sit.
\end_layout

\begin_layout Paragraph
Part Requirements
\end_layout

\begin_layout Standard
At least one 
\noun on
KerbalSeat
\noun default
 module.
\end_layout

\begin_layout Paragraph
Module Fields
\end_layout

\begin_layout Standard
None.
\end_layout

\begin_layout Subsubsection
ELRecycler
\end_layout

\begin_layout Standard
Destroys anything it touches (including unfortunate kerbals), reclaiming
 what resources it can.
 Implements 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
ELControlInterface
\end_layout

\end_inset

.
\end_layout

\begin_layout Paragraph
Model Requirements
\end_layout

\begin_layout Standard
The only requirement is the recycle field.
 The recycle field must be a trigger collider and should (must?) not touch
 any other collider.
\end_layout

\begin_layout Paragraph
Part Requirements
\end_layout

\begin_layout Standard
None.
\end_layout

\begin_layout Paragraph
Module Fields
\end_layout

\begin_layout Description
RecycleField_name Specifies the name of the transform for the recycle field
 collider.
 Defaults to 
\begin_inset Quotes eld
\end_inset

ReycleField
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Description
RecycleRate Specifies the recycling rate in tons/second.
 Defaults to 
\begin_inset Formula $1.0t/s$
\end_inset

.
\end_layout

\begin_layout Description
Operational Persistent backing for 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
ELControlInterface.canOperate
\end_layout

\end_inset

.
 Defaults to 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
true
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsubsection
ELSurveyStake
\end_layout

\begin_layout Standard
Marks locations for survey station.
 In the current implementation, a stake must be the only part in the vessel
 for the survey station to recognize it.
\end_layout

\begin_layout Paragraph
Model Requirements
\end_layout

\begin_layout Standard
None except any required by KIS
\begin_inset CommandInset citation
LatexCommand cite
key "KIS"
literal "true"

\end_inset

 for ground attachment.
\end_layout

\begin_layout Paragraph
Part Requirements
\end_layout

\begin_layout Standard
As the survey system will not look at vessels with more than one part to
 check for the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
ELSurveyStake
\end_layout

\end_inset

 module, the part should be configured to be ground attached using KIS
\begin_inset CommandInset citation
LatexCommand cite
key "KIS"
literal "true"

\end_inset

.
 However, parts designed to be dropped via staging or decoupling will work,
 too, so long as the resulting vessel consists of only the one part.
\end_layout

\begin_layout Paragraph
Module Fields
\end_layout

\begin_layout Standard
None.
\end_layout

\begin_layout Subsubsection
ELSurveyStation
\end_layout

\begin_layout Standard
Builds complete vessels at locations marked out using survey stakes (parts
 with the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
ELSurveyStake
\end_layout

\end_inset

 module).
 Does not allow post-build resource transfer (freedom is not free), but
 as KIS
\begin_inset CommandInset citation
LatexCommand cite
key "KIS"
literal "true"

\end_inset

 is required to place the stakes, and KAS
\begin_inset CommandInset citation
LatexCommand cite
key "KAS"
literal "true"

\end_inset

 is almost always installed with it, survey stations are probably the preferred
 tool for landed operations.
 Implements 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
ELControlInterface
\end_layout

\end_inset

.
\end_layout

\begin_layout Paragraph
Model Requirements
\end_layout

\begin_layout Standard
None.
\end_layout

\begin_layout Paragraph
Part Requirements
\end_layout

\begin_layout Standard
No requirements, but as kerbals improve its range, having crew capacity
 (
\begin_inset Flex Code
status open

\begin_layout Plain Layout
crewCapacity
\end_layout

\end_inset

 > 0 or 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
KerbalSeat
\end_layout

\end_inset

 modules) is recommended.
\end_layout

\begin_layout Paragraph
Module Fields
\end_layout

\begin_layout Description
StationName Specifies the name of the survey station.
 Note that this is editable by the user both in the editor (VAB/SPH) or
 in flight.
\end_layout

\begin_layout Description
Operational Persistent backing for 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
ELControlInterface.canOperate
\end_layout

\end_inset

.
 Defaults to 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
true
\end_layout

\end_inset

.
\end_layout

\begin_layout Description
SiteRanges Comma separated list of skill based ranges (in meters) for the
 survey station.
 If not provided, the defaults will be used.
 Excess ranges are ignored, insufficient ranges result in unspecified ranges
 being left as default.
 Zero or negative ranges leave that range at the default value.
 Errors simply abort the processing of the list and are equivalent to the
 list being short (but a error is sent to KSP.log).
\end_layout

\begin_layout Subsubsection
ELTarget
\end_layout

\begin_layout Standard
Allows a part to be targeted.
 Includes orientation so it works with any docking alignment mod (DPAI
\begin_inset CommandInset citation
LatexCommand cite
key "DPAI"
literal "true"

\end_inset

, navball
\begin_inset CommandInset citation
LatexCommand cite
key "NBDOCK"
literal "true"

\end_inset

, and navhud
\begin_inset CommandInset citation
LatexCommand cite
key "NAVHUD"
literal "true"

\end_inset

 are known to work).
\end_layout

\begin_layout Paragraph
Model Requirements
\end_layout

\begin_layout Standard
None.
\end_layout

\begin_layout Paragraph
Part Requirements
\end_layout

\begin_layout Standard
None.
\end_layout

\begin_layout Paragraph
Module Fields
\end_layout

\begin_layout Description
TargetTransform Specifies the model transform to be used as the target.
 If not specified (the default), the model's root transform will be used.
\end_layout

\begin_layout Description
TargetName String to be added after the host vessel's name when set as target.
 Defaults to 
\begin_inset Quotes eld
\end_inset

Target
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsubsection
ELWorkshop
\end_layout

\begin_layout Standard
Collect productivity from kerbals in the part.
 Works with either normal parts with crew capacity or command chairs.
\end_layout

\begin_layout Paragraph
Model Requirements
\end_layout

\begin_layout Standard
None.
\end_layout

\begin_layout Paragraph
Part Requirements
\end_layout

\begin_layout Standard
The part must have some crew capacity.
 This can be via either the part's 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
crewCapacity
\end_layout

\end_inset

 field, or 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
KerbalSeat
\end_layout

\end_inset

 (stock KSP) modules, or both.
 Note that parts may have multiple 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
KerbalSeat
\end_layout

\end_inset

 modules on them (eg, EL's Rocket Workbench).
\end_layout

\begin_layout Paragraph
Module Fields
\end_layout

\begin_layout Description
ProductivityFactor Specifies the multiplier for calculating kerbal productivity.
 Must be greater than 
\begin_inset Formula $0$
\end_inset

.
 All workshops with 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
ProductivityFactor
\end_layout

\end_inset

 greater than 
\begin_inset Formula $1.0$
\end_inset

 are considered to be fully equipped (ie, even 0-star kerbals with the construct
ion skill can contribute).
 Defaults to 
\begin_inset Formula $1.0$
\end_inset

.
\end_layout

\begin_layout Description
UnmannedProductivity Productivity of the workshop when unmanned.
 Not affected by 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
ProductivityFactor
\end_layout

\end_inset

.
 Defaults to 
\begin_inset Formula $0.0$
\end_inset

.
\end_layout

\begin_layout Description
FullyEquipped If true, then even workshops with productivity factors less
 than 
\begin_inset Formula $1.0$
\end_inset

 are considered fully equipped allowing 0-star kerbals to contribute.
\end_layout

\begin_layout Description
IgnoreCrewCapacity If true, the workshop will operate even if the part's
 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
crewCapacity
\end_layout

\end_inset

 is 
\begin_inset Formula $0$
\end_inset

 (and not check for 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
KerbalSeat
\end_layout

\end_inset

).
 This is most useful on parts with dynamic crew capacities (eg, inflatables).
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sec:Recipes"

\end_inset

Recipes
\end_layout

\begin_layout Standard
Extraplanetary Launchpads provides, via recipes, a means of customizing
 the resource costs for building parts, their modules and resources, and
 thus whole vessels.
 The recipes are used also for recycling.
 
\end_layout

\begin_layout Standard
Essentially, recipes are config nodes with a list of ingredients with their
 ratios in the form of 
\noun on
IngredientName = Ratio
\noun default
, although each recipe type will be a little more complex (details given
 below).
 The final ratio of each ingredient is calculated by dividing the specified
 ratio by the sum of the ratios of all ingredients in the recipe such that
 the final total is 
\begin_inset Formula $1.0$
\end_inset

.
 This allows for flexibility in how the ratios are specified, so long as
 consistency is maintained throughout the individual recipe: they can be
 considered as 
\begin_inset Quotes eld
\end_inset

parts
\begin_inset Quotes erd
\end_inset

 as in when mixing drinks (one part this, two parts that...), as masses in
 any unit (
\begin_inset Formula $24g$
\end_inset

 this, 
\begin_inset Formula $16g$
\end_inset

 that, 
\begin_inset Formula $6g$
\end_inset

 the other
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
A popular compound.
\end_layout

\end_inset

), percentages (if they add up to 
\begin_inset Formula $100$
\end_inset

), or raw ratios (if they add up to 
\begin_inset Formula $1.0$
\end_inset

).
 Note, however, that EL always uses mass for its calculations.
\end_layout

\begin_layout Standard
For example, glucose (C
\begin_inset script subscript

\begin_layout Plain Layout
6
\end_layout

\end_inset

H
\begin_inset script subscript

\begin_layout Plain Layout
12
\end_layout

\end_inset

O
\begin_inset script subscript

\begin_layout Plain Layout
6
\end_layout

\end_inset

) using approximate molar masses:
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "30col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
Using masses:
\end_layout

\begin_layout Verbatim

Carbon = 72
\end_layout

\begin_layout Verbatim

Hydrogen = 12
\end_layout

\begin_layout Verbatim

Oxygen = 96
\end_layout

\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "30col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
Using parts:
\end_layout

\begin_layout Verbatim

Carbon = 6
\end_layout

\begin_layout Verbatim

Hydrogen = 1
\end_layout

\begin_layout Verbatim

Oxygen = 8
\end_layout

\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "30col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
Using raw ratios:
\end_layout

\begin_layout Verbatim

Carbon = 0.4
\end_layout

\begin_layout Verbatim

Hydrogen = 0.06667
\end_layout

\begin_layout Verbatim

Oxygen = 0.53333
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
In general, the ingredients will be KSP resources.
 EL looks up the resource to find its density and calculates the amount
 of resource required based on the total mass of the recipe, the ingredient's
 ratio within the recipe as a fraction of the total mass, and the density
 of the resource to give the resource units required to achieve that mass.
\end_layout

\begin_layout Standard
Ingredients may be repeated within a recipe, in which case their ratios
 will simply be added together.
 This makes creating recipes from chemical formula a little easier.
\end_layout

\begin_layout Standard
Unknown ingredients contribute to the total ratio and thus affect the ratios
 of known ingredients.
 Their effects when building are undefined, but they operate as losses when
 recycling (i.e., unknown ingredients simply evaporate when a part is recycled).
\end_layout

\begin_layout Standard
Ingredients specifying KSP resources that have no mass do not contribute
 their ratios to the recipes total, but will be scaled by the same amount
 as the ingredients that do have mass.
 Unknown ingredients are assumed to have mass.
 A recipe consisting of only ingredients that have no mass will cause headaches.
\end_layout

\begin_layout Subsubsection
Recipes for Building
\end_layout

\begin_layout Standard
Building parts (and thus vessels) requires resources.
 The total mass of the resources required for building a part is given by
 the part's mass, but the mix of resources needed by the part is given by
 the part's recipe.
 Also, certain resources stored in a part (e.g.
 
\noun on
SolidFuel
\noun default
, 
\noun on
Ablator
\noun default
) cannot normally be created by other means (neither stock ISRU nor Kethane
 provide a means to produce them), nor can they be transfered, so recipes
 can be used for specifying how to build them.
\end_layout

\begin_layout Standard
Any resource listed in a recipe becomes a required resource (i.e.
 the build will not complete if any required resource runs out).
 Note, however, that normal resources that are simply stored in the part
 to be built remain optional.
 For example, to build a tank that holds 
\noun on
RocketParts
\noun default
, A mass of 
\noun on
RocketParts
\noun default
 equivalent to the dry mass of the tank is required to build the tank itself,
 but the 
\noun on
RocketParts
\noun default
 used to fill the tank remain optional.
 Thus, if there is a supply of 
\noun on
RocketParts
\noun default
 sufficient to build the tank, but not enough to fill it, then the tank
 will be only partially full (or possibly even empty) when built.
\end_layout

\begin_layout Standard
In summary:
\end_layout

\begin_layout Itemize
Any resource mentioned in 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
EL_Recipe
\end_layout

\end_inset

 or 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
EL_ModuleRecipe
\end_layout

\end_inset

 is required for building (but not for filling tanks).
\end_layout

\begin_layout Itemize
Any stored resource that has an 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
EL_ResourceRecipe
\end_layout

\end_inset

 becomes a required resource (eg, 
\noun on
SolidFuel
\noun default
).
\end_layout

\begin_layout Itemize
Any resource stored in a part inside a KIS container becomes a required
 resource, regardless of recipes.
\end_layout

\begin_layout Description
EL_Recipe Specify the resources needed to build a part.
 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
EL_Recipe
\end_layout

\end_inset

 is to be added to the part's config (either by hand or using Module Manager).
 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
EL_Recipe
\end_layout

\end_inset

 nodes are really two nested recipes: the outer recipe specifies the ratios
 between the part's structure (using 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
structure
\end_layout

\end_inset

 as the ingredient name) and its part modules (the ingredient name is the
 name of the part module).
 The inner recipe is the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Resources
\end_layout

\end_inset

 node, which specifies the resources needed to build the part's structure.
\end_layout

\begin_deeper
\begin_layout Standard
Any part that does not have an 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
EL_Recipe
\end_layout

\end_inset

 node will be given the default shown below, but with additional 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
modulename = 1
\end_layout

\end_inset

 lines for each part module on the part that has a corresponding 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
EL_ModuleRecipe
\end_layout

\end_inset

.
 Also, the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Resources
\end_layout

\end_inset

 node will be taken from 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
EL_DefaultStructureRecipe
\end_layout

\end_inset

 (both for parts that have no 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
EL_Recipe
\end_layout

\end_inset

 node, or whose 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
EL_Recipe
\end_layout

\end_inset

 node has no 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Resources
\end_layout

\end_inset

 node).
\end_layout

\begin_layout Verbatim
EL_Recipe {
\end_layout

\begin_layout Verbatim
    structure = 5
\end_layout

\begin_layout Verbatim
    Resources {
\end_layout

\begin_layout Verbatim
        RocketParts = 1
\end_layout

\begin_layout Verbatim
    }
\end_layout

\begin_layout Verbatim
}
\end_layout

\end_deeper
\begin_layout Description
EL_ModuleRecipe Specify the resources needed to build any part's module.
 Applies to all instances of that module.
 The module to which the recipe applies is specified by the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
name =
\end_layout

\end_inset

 line, and the actual recipe for the module is specified by the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Resources
\end_layout

\end_inset

 node.
 The mass of the module is calculated from the part's mass using the ratio
 specified in the part's recipe.
 If the named module does not exist, no module is named (ie, no top-level
 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
name =
\end_layout

\end_inset

 line), or no recipe is given (no 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Resources
\end_layout

\end_inset

 node), the recipe will be dropped from the recipe database.
\end_layout

\begin_deeper
\begin_layout Standard
The example below gives EL's module recipe for 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
KerbalEVA
\end_layout

\end_inset

.
 The ratios are in kilograms, assuming a suited kerbal has a mass of 
\begin_inset Formula $93.75kg$
\end_inset

 (
\begin_inset Formula $10kg$
\end_inset

 for the kerbal).
 It can be found in 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Kerbal.cfg
\end_layout

\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "elker"
literal "true"

\end_inset

.
\end_layout

\begin_layout Verbatim
EL_ModuleRecipe {
\end_layout

\begin_layout Verbatim
    name = KerbalEVA
\end_layout

\begin_layout Verbatim
    Resources {
\end_layout

\begin_layout Verbatim
        Metal = 39
\end_layout

\begin_layout Verbatim
        loss = 44.75
\end_layout

\begin_layout Verbatim
    }
\end_layout

\begin_layout Verbatim
}
\end_layout

\end_deeper
\begin_layout Description
EL_DefaultStructureRecipe Specify the default recipe to be used for a part's
 structure when the part has no recipe or the recipe does not specify a
 recipe for its structure.
 There is no node in EL's configs: it is hard coded.
 However, providing an 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
EL_DefaultStructureRecipe
\end_layout

\end_inset

 will override the hard-coded default.
\end_layout

\begin_deeper
\begin_layout Verbatim
EL_DefaultStructureRecipe {
\end_layout

\begin_layout Verbatim
    RocketParts = 1
\end_layout

\begin_layout Verbatim
}
\end_layout

\end_deeper
\begin_layout Description
EL_ResourceRecipe Specify the resources needed to 
\begin_inset Quotes eld
\end_inset

build
\begin_inset Quotes erd
\end_inset

 a resource.
 The resource to be 
\begin_inset Quotes eld
\end_inset

built
\begin_inset Quotes erd
\end_inset

 is specified by the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
name =
\end_layout

\end_inset

 line, and the recipe for the 
\begin_inset Quotes eld
\end_inset

built
\begin_inset Quotes erd
\end_inset

 resource is specified by the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Resources
\end_layout

\end_inset

 node.
 If no resource is named (ie, no top-level 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
name =
\end_layout

\end_inset

 line), or no recipe is given (no 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Resources
\end_layout

\end_inset

 node), the recipe will be dropped from the recipe database.
 Recipes for undefined resources are permitted, allowing for resource 
\begin_inset Quotes eld
\end_inset

macros
\begin_inset Quotes erd
\end_inset


\begin_inset Foot
status collapsed

\begin_layout Plain Layout
TODO: In theory: not tested.
\end_layout

\end_inset

.
 The example resource recipe shows 
\noun on
Ablator
\noun default
 being made from 
\noun on
RocketParts
\noun default
.
 It and a similar recipe for 
\noun on
SolidFuel
\noun default
 can be found in 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Recipes.cfg
\end_layout

\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "elrec"
literal "true"

\end_inset

.
\end_layout

\begin_deeper
\begin_layout Verbatim
EL_ResourceRecipe {
\end_layout

\begin_layout Verbatim
    name = Ablator
\end_layout

\begin_layout Verbatim
    Resources {
\end_layout

\begin_layout Verbatim
        RocketParts = 1
\end_layout

\begin_layout Verbatim
    }
\end_layout

\begin_layout Verbatim
}
\end_layout

\end_deeper
\begin_layout Subsubsection
Recipes for Recycling
\end_layout

\begin_layout Standard
First off, when recycling, part recipes (
\begin_inset Flex Code
status open

\begin_layout Plain Layout
EL_Recipe
\end_layout

\end_inset

) are used for breaking a part down into its constituent resources.
 Whether from breaking down the part or 
\begin_inset Quotes eld
\end_inset

drained
\begin_inset Quotes erd
\end_inset

 from the part's resource storage, any resource that has a resource recipe
 (
\begin_inset Flex Code
status open

\begin_layout Plain Layout
EL_ResourceRecipe
\end_layout

\end_inset

) will simply evaporate.
 However, if the resource has a recycle recipe (
\begin_inset Flex Code
status open

\begin_layout Plain Layout
EL_RecycleRecipe
\end_layout

\end_inset

), then that recipe will instead be broken down to the resources specified
 by the recycle recipe.
 A transfer recipe (
\begin_inset Flex Code
status open

\begin_layout Plain Layout
EL_TransferRecipe
\end_layout

\end_inset

) is used to force a stored resource that would otherwise be lost or broken
 down by a recycle recipe to be transfered.
\end_layout

\begin_layout Itemize
Any resources stored in the part are drained.
 Those with an 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
EL_TransferRecipe
\end_layout

\end_inset

 are transferred accordingly.
 Those with an 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
EL_ResourceRecipe
\end_layout

\end_inset

 but no 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
EL_RecycleRecipe
\end_layout

\end_inset

 are lost, otherwise they are broken down as dictated by the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
EL_RecycleRecipe
\end_layout

\end_inset

 and the resultant resources will be transfered.
\end_layout

\begin_layout Itemize
The part is then broken down into the resources specified by its 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
EL_Recipe
\end_layout

\end_inset

 and 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
EL_ModuleRecipe
\end_layout

\end_inset

(s).
 Those resources with an 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
EL_ResourceRecipe
\end_layout

\end_inset

 but no 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
EL_RecycleRecipe
\end_layout

\end_inset

 are lost, otherwise they get broken down further in accordance with their
 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
EL_RecycleRecipe
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
Whether transferring (from a tank) or recycling (the part itself), resources
 with no recipe are reclaimed as-is at a 1:1 ratio.
\end_layout

\begin_layout Description
EL_RecycleRecipe Specify the resources to which a resource will be broken
 down when recycling.
 Prevents evaporation of the resource when the resource has a resource recipe
 (
\begin_inset Flex Code
status open

\begin_layout Plain Layout
EL_ResourceRecipe
\end_layout

\end_inset

).
 The resource to be broken down is specified by the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
name =
\end_layout

\end_inset

 line, and the recipe for the broken down resource is specified by the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Resources
\end_layout

\end_inset

 node.
 If no resource is named (ie, no top-level 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
name =
\end_layout

\end_inset

 line), or no recipe is given (no 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Resources
\end_layout

\end_inset

 node), the recipe will be dropped from the recipe database.
 Ingredients specifying undefined resources are permitted, allowing for
 loss ratios to be specified.
 The example recycle recipe shows 
\noun on
RocketParts
\noun default
 being broken down to 
\noun on
ScrapMetal
\noun default
 with 
\begin_inset Formula $10$
\end_inset

% loss (the exact name (
\begin_inset Flex Code
status open

\begin_layout Plain Layout
loss
\end_layout

\end_inset

) doesn't matter so long as it is not a defined resource).
 It can be found in 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Recipes.cfg
\end_layout

\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "elrec"
literal "true"

\end_inset

.
\end_layout

\begin_deeper
\begin_layout Verbatim
EL_RecycleRecipe {
\end_layout

\begin_layout Verbatim
    name = RocketParts
\end_layout

\begin_layout Verbatim
    Resources {
\end_layout

\begin_layout Verbatim
        ScrapMetal = 9
\end_layout

\begin_layout Verbatim
        loss = 1
\end_layout

\begin_layout Verbatim
    }
\end_layout

\begin_layout Verbatim
}
\end_layout

\end_deeper
\begin_layout Description
EL_TransferRecipe Specifies how a resource that was stored in a part is
 to be transfered.
 Prevents the resource from being broken down by a recycle recipe when being
 drained from a part's storage.
 The resource to be transfered is specified by the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
name =
\end_layout

\end_inset

 line, and the recipe for the transfered resource is specified by the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Resources
\end_layout

\end_inset

 node.
 If no resource is named (ie, no top-level 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
name =
\end_layout

\end_inset

 line), or no recipe is given (no 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Resources
\end_layout

\end_inset

 node), the recipe will be dropped from the recipe database.
 Recipes for undefined resources are permitted, allowing for loss ratios
 to be specified.
 In general, the same resource should be specified in the recipe, but a
 transfer recipe can be used for converting a resource that does not have
 a recycle recipe, or for specifying a loss factor while transferring.
 The example transfer recipe shows 
\noun on
RocketParts
\noun default
 being transfered without any loss or conversion.
 It can be found in 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Recipes.cfg
\end_layout

\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "elrec"
literal "true"

\end_inset

.
\end_layout

\begin_deeper
\begin_layout Verbatim
EL_TransferRecipe {
\end_layout

\begin_layout Verbatim
    name = RocketParts
\end_layout

\begin_layout Verbatim
    Resources {
\end_layout

\begin_layout Verbatim
        RocketParts = 1
\end_layout

\begin_layout Verbatim
    }
\end_layout

\begin_layout Verbatim
}
\end_layout

\end_deeper
\begin_layout Description
EL_KerbalRecipe Specifies the resources making up a kerbal (whether on EVA
 or boarded
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
The kerbal is assumed to be suited or have a suit nearby in the same part
\end_layout

\end_inset

).
 This is a special part recipe that is not actually attached to any part
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
The need for the node came from not having access to KerbalEVA part configs
 at the time, and keeping it after KSP 1.2 maintains flexibility.
\end_layout

\end_inset

, and is used only when the unfortunate kerbal gets recycled.
 The kerbal recipe shown below assumes a fully suited kerbal is 
\begin_inset Formula $93.75kg$
\end_inset

 (the default in KSP) with 
\begin_inset Formula $10kg$
\end_inset

 for the kerbal and 
\begin_inset Formula $83.75kg$
\end_inset

 for the suit, with a 30:1 
\emph on
gain
\emph default

\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Highly unrealistic, but that is how the KE-WAITNONOSTOP-01 in Kethane is
 configured
\end_layout

\end_inset

 when converting the kerbal to 
\noun on
Kethane
\noun default
.
 It can be found in 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Kerbal.cfg
\end_layout

\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "elker"
literal "true"

\end_inset

.
\end_layout

\begin_deeper
\begin_layout Verbatim
EL_KerbalRecipe {
\end_layout

\begin_layout Verbatim
    structure = 10
\end_layout

\begin_layout Verbatim
    KerbalEVA = 83.75
\end_layout

\begin_layout Verbatim
    Resources {
\end_layout

\begin_layout Verbatim
        Kethane = 30
\end_layout

\begin_layout Verbatim
        loss = -29
\end_layout

\begin_layout Verbatim
    }
\end_layout

\begin_layout Verbatim
}
\end_layout

\end_deeper
\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Recipes-for-Converting"

\end_inset

Recipes for Converting
\end_layout

\begin_layout Description
EL_ConverterRecipe Conversion recipes make configuring chemically correct
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Or reasonable approximations thereof.
\end_layout

\end_inset

 resource converters fairly simple as they allow the conversion rate to
 be separated from the resource ratios.
 Each conversion recipe provides a name which can be referenced by the converter
 config, a set of input recipes, and a set of output recipes.
 At least one of each recipe set must be present for the converter recipe
 to be valid, but there is no need for the two sets to have the same number
 of recipes.
\end_layout

\begin_deeper
\begin_layout Standard
All ingredients in an input recipe must be either a defined KSP resource,
 or an 
\noun on
EL_ResourceRecipe
\noun default
.
 Any ingredients in a referenced 
\noun on
EL_ResourceRecipe
\noun default
 also must be defined.
 In the example below, 
\noun on
LFOMix
\noun default
 is such.
 It is used because stock KSP 
\noun on
LiquidFuel
\noun default
 and 
\noun on
Oxidizer
\noun default
 densities are incorrect for RP-1 (0.81kg/L) and LOX (1.141kg/L) which makes
 getting the rates correct difficult.
 Thus 
\noun on
LFOMix
\noun default
 is a workaround.
\end_layout

\begin_layout Standard
Any undefined ingredients in an output recipe simply evaporate (i.e., they
 are jettisoned).
\end_layout

\begin_layout Standard
Both input recipes and output recipes have a special ingredient: 
\noun on
efficiency
\noun default
.
 The 
\noun on
efficiency
\noun default
 ingredient is used to calculate the actual recipe used by the converter
 based on the converter's current efficiency, acting as keys in an efficiency
 curve.
 The ratios of the other ingredients are interpolated between those specified
 by the recipes with efficiencies on either side of the converter's current
 recipe.
 Ingredients in converter recipes support an optional heat parameter which
 defaults to 0 and is scaled with the ingredient when the recipe is baked.
 Output heats are added to the part's internal flux while input heats are
 subtracted from the part's internal flux.
 If the ingredient ratios are in grams, then the heats are in kilo-joules.
 The mass flow of the conversion process is governed by the input recipe
 with the smallest mass.
\end_layout

\begin_layout Verbatim
EL_ConverterRecipe {
\end_layout

\begin_layout Verbatim
    name = LFOFiredSmelter
\end_layout

\begin_layout Verbatim
    Input {
\end_layout

\begin_layout Verbatim
        efficiency = 1
\end_layout

\begin_layout Verbatim
        LFOMix = 864.49048 -5186.94288
\end_layout

\begin_layout Verbatim
        MetalOre = 1596.882
\end_layout

\begin_layout Verbatim
    }
\end_layout

\begin_layout Verbatim
    Output {
\end_layout

\begin_layout Verbatim
        efficiency = 1
\end_layout

\begin_layout Verbatim
        CarbonDioxide = 1056.228
\end_layout

\begin_layout Verbatim
        Water = 288.24448
\end_layout

\begin_layout Verbatim
        Metal = 1116.9 -9627.678
\end_layout

\begin_layout Verbatim
    }
\end_layout

\begin_layout Verbatim
    Input {
\end_layout

\begin_layout Verbatim
        efficiency = 0
\end_layout

\begin_layout Verbatim
        LFOMix = 864.49048 -5186.94288
\end_layout

\begin_layout Verbatim
    }
\end_layout

\begin_layout Verbatim
    Output {
\end_layout

\begin_layout Verbatim
        efficiency = 0
\end_layout

\begin_layout Verbatim
        Carbon = 24.0214
\end_layout

\begin_layout Verbatim
        CarbonDioxide = 176.038
\end_layout

\begin_layout Verbatim
        CarbonMonoxide = 476.1717
\end_layout

\begin_layout Verbatim
        Formaldehyde = 30.02598
\end_layout

\begin_layout Verbatim
        Hydrogen = 14.11116
\end_layout

\begin_layout Verbatim
        Water = 144.12224
\end_layout

\begin_layout Verbatim
    }
\end_layout

\begin_layout Verbatim
}
\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Verbatim
EL_ResourceRecipe {
\end_layout

\begin_layout Verbatim
    name = LFOMix
\end_layout

\begin_layout Verbatim
    Resources {
\end_layout

\begin_layout Verbatim
        LiquidFuel = 9
\end_layout

\begin_layout Verbatim
        Oxidizer = 11
\end_layout

\begin_layout Verbatim
    }
\end_layout

\begin_layout Verbatim
}
\end_layout

\end_deeper
\begin_layout Subsubsection
Other Recipes
\end_layout

\begin_layout Description
EL_ResourceLink While not strictly a recipe, 
\noun on
EL_ResourceLink
\noun default
 is used for specifying resources that should be linked when setting up
 resource transfer after building a new craft but before releasing it.
 The node is very simple: a 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
name
\end_layout

\end_inset

 line that names the link set (currently not used internally, but useful
 for Module Manager patches), and a series of 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
resource
\end_layout

\end_inset

 lines that specify the resources in the link set.
 Any link sets with overlaps in their linked resources will result in undefined
 behavior
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
rhinodamons
\end_layout

\end_inset


\end_layout

\begin_layout Verbatim
EL_ResourceLink {
\end_layout

\begin_layout Verbatim
    name = RocketFuel
\end_layout

\begin_layout Verbatim
    resource = LiquidFuel
\end_layout

\begin_layout Verbatim
    resource = Oxidizer
\end_layout

\begin_layout Verbatim
} 
\end_layout

\begin_layout Subsection
Resource Rates
\end_layout

\begin_layout Standard
The amount of work required to prepare resources may be configured using
 an 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
EL_ResourceRates
\end_layout

\end_inset

 node.
 This node is very simple in that it is just a list of 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
resourcename = rate
\end_layout

\end_inset

 lines.
 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
resourcename
\end_layout

\end_inset

 is the name of the resource (or 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
default
\end_layout

\end_inset

 to specify the default rate), and 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
rate
\end_layout

\end_inset

 is the amount of kerbal-hours / ton (or kerbal-seconds / unit for massless
 resources (such as 
\noun on
ElectricCharge
\noun default
)).
 Note that this affects only those resources that are required to complete
 the build, not optional resources that will be transferred afterwards.
 If 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
default
\end_layout

\end_inset

 is not specified, then it defaults to 
\begin_inset Formula $5$
\end_inset

.
\end_layout

\begin_layout Verbatim
EL_ResourceRates {
\end_layout

\begin_layout Verbatim
    default = 5
\end_layout

\begin_layout Verbatim
    ElectricCharge = 1
\end_layout

\begin_layout Verbatim
    LiquidFuel = 0.36
\end_layout

\begin_layout Verbatim
    Oxidizer = 0.44
\end_layout

\begin_layout Verbatim
    MonoPropellant = 0.4
\end_layout

\begin_layout Verbatim
    XenonGas = 2
\end_layout

\begin_layout Verbatim
    Ore = 8
\end_layout

\begin_layout Verbatim
} 
\end_layout

\begin_layout Section
EL API
\end_layout

\begin_layout Standard
Calling it an API might be stretching things, but...
\end_layout

\begin_layout Subsection
Interfaces
\end_layout

\begin_layout Subsubsection
ELBuildControl.IBuilder 
\end_layout

\begin_layout Standard
\begin_inset Flex Code
status open

\begin_layout Plain Layout
ELBuildControl
\end_layout

\end_inset

 is the actual workhorse for building vessels, the various pad modules all
 use 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
ELBuildControl
\end_layout

\end_inset

 for the common functionality.
 The 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
IBuilder
\end_layout

\end_inset

 interface is the methods and properties that 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
ELBuildControl
\end_layout

\end_inset

 requires of the pad modules.
 There are several methods and properties, but main property of interest
 is 
\noun on
control
\noun default
 which provides access to the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
ELBuildControl
\end_layout

\end_inset

 object attached to the pad.
\end_layout

\begin_layout Subsubsection
ELControlInterface
\end_layout

\begin_layout Standard
Its purpose is to allow other mods easy control and detection of the operational
 status of EL's modules.
 For example, mods with inflatable parts can disable the EL module when
 the part is deflated and block deflation when the EL part is busy.
\end_layout

\begin_layout Paragraph
Fields
\end_layout

\begin_layout Standard
Note that these are actually properties, so access via reflection needs
 to be done using 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
GetProperty
\end_layout

\end_inset

, 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
PropertyInfo.GetValue
\end_layout

\end_inset

 and 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
PropertyInfo.Setvalue
\end_layout

\end_inset

.
\end_layout

\begin_layout Description
isBusy Read-only boolean that indicates whether the module is currently
 busy processing something.
 While not enforced, the module should not be disabled while it is busy
 (i.e.
 the part should not be deflated).
\end_layout

\begin_layout Description
canOperate Boolean usable by other part modules to enable or disable (or
 detect) the operational status of the EL part module.
 Setting this may cause the implementing module to run other code (e.g.
 the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
ELSurveyStation
\end_layout

\end_inset

 module will recompute its range and possibly scan for sites), so mods must
 invoke the property setter to guarantee correct behavior.
\end_layout

\begin_layout Subsubsection
ELWorkNode
\end_layout

\begin_layout Standard
Base interface for 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
ELWorkSink
\end_layout

\end_inset

 and 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
ELWorkSource
\end_layout

\end_inset

.
 Any module implementing 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
ELWorkNode
\end_layout

\end_inset

 will have its 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
workNet
\end_layout

\end_inset

 property set by 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
ELVesselWorkNet
\end_layout

\end_inset

 when the network is updated.
\end_layout

\begin_layout Subsubsection
ELWorkSink 
\end_layout

\begin_layout Standard
Consumes vessel productivity to get something done.
\end_layout

\begin_layout Subsubsection
ELWorkSource 
\end_layout

\begin_layout Standard
Provides vessel productivity.
\end_layout

\begin_layout Subsubsection
IResourceProvider 
\end_layout

\begin_layout Standard
Interface used by 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
ELExtractor
\end_layout

\end_inset

 for querying environmental resource availability and extracting a resource
 from the environment.
\end_layout

\begin_layout Subsection
Part Modules
\end_layout

\begin_layout Subsubsection
ELControlReference
\end_layout

\begin_layout Subsubsection
ELConverter
\end_layout

\begin_layout Subsubsection
ELDisposablePad
\end_layout

\begin_layout Subsubsection
ELExtractor
\end_layout

\begin_layout Subsubsection
ELLaunchpad
\end_layout

\begin_layout Subsubsection
ELNoControlSwitch
\end_layout

\begin_layout Subsubsection
ELRecycler
\end_layout

\begin_layout Subsubsection
ELSurveyStake
\end_layout

\begin_layout Subsubsection
ELSurveyStation
\end_layout

\begin_layout Subsubsection
ELTarget
\end_layout

\begin_layout Subsubsection
ELWorkshop
\end_layout

\begin_layout Subsection
Vessel Modules
\end_layout

\begin_layout Subsubsection
ELVesselWorkNet
\end_layout

\begin_layout Standard
Central control of productivity for the entire vessel.
 Keeps track of output from work sources (eg, workshops) and distributes
 the productivity over active work sinks (eg, pads).
 Operates on unloaded vessels as well as loaded vessels so that work is
 properly distributed when multiple work sinks are operating but they finish
 at different times while the vessel is unloaded.
 Also prevents erroneous productivity credit caused by leaving a vessel
 unattended for several game years
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Background building was implemented by keeping track of how long the vessel
 was unloaded.
 When the vessel was loaded, the time was processed in chunks of (default)
 21600 seconds every physics frame.
 This works out to fifty Kerbin days per second, so if a vessel had not
 been visited for ten Kerbin years, there would be an 85 second (game-time,
 worse for low FPS real-time) window after switching to the vessel in which
 new builds would finish instantly (assuming resource availability).
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
printbibliography[heading=bibintoc]
\end_layout

\end_inset


\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "kspforums"
options "bibtotoc,plain"

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
